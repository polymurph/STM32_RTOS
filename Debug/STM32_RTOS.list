
STM32_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005344  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005630  08005630  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b0  20000010  08005648  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049c0  08005648  000249c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012820  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027eb  00000000  00000000  00032860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00035050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00035e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022370  00000000  00000000  00036a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d40d  00000000  00000000  00058de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbaa7  00000000  00000000  000661f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d0  00000000  00000000  00131d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054bc 	.word	0x080054bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080054bc 	.word	0x080054bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <appMain>:
#include "app_main.h"

void appMain(void* args)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

	while(1)
 80004d8:	e7fe      	b.n	80004d8 <appMain+0x8>
	...

080004dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <MX_FREERTOS_Init+0x18>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_FREERTOS_Init+0x1c>)
 80004e6:	f002 fadb 	bl	8002aa0 <osThreadNew>
 80004ea:	4602      	mov	r2, r0
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <MX_FREERTOS_Init+0x20>)
 80004ee:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	080055ec 	.word	0x080055ec
 80004f8:	08000501 	.word	0x08000501
 80004fc:	20004934 	.word	0x20004934

08000500 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f002 fb6f 	bl	8002bec <osDelay>
 800050e:	e7fb      	b.n	8000508 <StartDefaultTask+0x8>

08000510 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
 800052a:	4bb5      	ldr	r3, [pc, #724]	; (8000800 <MX_GPIO_Init+0x2f0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4ab4      	ldr	r2, [pc, #720]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4bb2      	ldr	r3, [pc, #712]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0310 	and.w	r3, r3, #16
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	4bae      	ldr	r3, [pc, #696]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4aad      	ldr	r2, [pc, #692]	; (8000800 <MX_GPIO_Init+0x2f0>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4bab      	ldr	r3, [pc, #684]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	4ba7      	ldr	r3, [pc, #668]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4aa6      	ldr	r2, [pc, #664]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4ba4      	ldr	r3, [pc, #656]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4ba0      	ldr	r3, [pc, #640]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a9f      	ldr	r2, [pc, #636]	; (8000800 <MX_GPIO_Init+0x2f0>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b9d      	ldr	r3, [pc, #628]	; (8000800 <MX_GPIO_Init+0x2f0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b99      	ldr	r3, [pc, #612]	; (8000800 <MX_GPIO_Init+0x2f0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a98      	ldr	r2, [pc, #608]	; (8000800 <MX_GPIO_Init+0x2f0>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b96      	ldr	r3, [pc, #600]	; (8000800 <MX_GPIO_Init+0x2f0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b92      	ldr	r3, [pc, #584]	; (8000800 <MX_GPIO_Init+0x2f0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a91      	ldr	r2, [pc, #580]	; (8000800 <MX_GPIO_Init+0x2f0>)
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b8f      	ldr	r3, [pc, #572]	; (8000800 <MX_GPIO_Init+0x2f0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0308 	and.w	r3, r3, #8
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2108      	movs	r1, #8
 80005d2:	488c      	ldr	r0, [pc, #560]	; (8000804 <MX_GPIO_Init+0x2f4>)
 80005d4:	f000 ff78 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	488a      	ldr	r0, [pc, #552]	; (8000808 <MX_GPIO_Init+0x2f8>)
 80005de:	f000 ff73 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005e2:	2200      	movs	r2, #0
 80005e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005e8:	4888      	ldr	r0, [pc, #544]	; (800080c <MX_GPIO_Init+0x2fc>)
 80005ea:	f000 ff6d 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80005ee:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80005f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f4:	2303      	movs	r3, #3
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4880      	ldr	r0, [pc, #512]	; (8000804 <MX_GPIO_Init+0x2f4>)
 8000604:	f000 fc74 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000608:	2308      	movs	r3, #8
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4879      	ldr	r0, [pc, #484]	; (8000804 <MX_GPIO_Init+0x2f4>)
 8000620:	f000 fc66 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC2 PC4
                           PC5 PC6 PC8 PC9
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000624:	f642 3376 	movw	r3, #11126	; 0x2b76
 8000628:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	2303      	movs	r3, #3
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	4873      	ldr	r0, [pc, #460]	; (8000808 <MX_GPIO_Init+0x2f8>)
 800063a:	f000 fc59 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800063e:	2301      	movs	r3, #1
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	486c      	ldr	r0, [pc, #432]	; (8000808 <MX_GPIO_Init+0x2f8>)
 8000656:	f000 fc4b 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800065a:	2308      	movs	r3, #8
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800066a:	2305      	movs	r3, #5
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4864      	ldr	r0, [pc, #400]	; (8000808 <MX_GPIO_Init+0x2f8>)
 8000676:	f000 fc3b 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	2301      	movs	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067e:	4b64      	ldr	r3, [pc, #400]	; (8000810 <MX_GPIO_Init+0x300>)
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4861      	ldr	r0, [pc, #388]	; (8000814 <MX_GPIO_Init+0x304>)
 800068e:	f000 fc2f 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000692:	f248 130e 	movw	r3, #33038	; 0x810e
 8000696:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000698:	2303      	movs	r3, #3
 800069a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	485b      	ldr	r0, [pc, #364]	; (8000814 <MX_GPIO_Init+0x304>)
 80006a8:	f000 fc22 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006ac:	2310      	movs	r3, #16
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006bc:	2306      	movs	r3, #6
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4853      	ldr	r0, [pc, #332]	; (8000814 <MX_GPIO_Init+0x304>)
 80006c8:	f000 fc12 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006cc:	23e0      	movs	r3, #224	; 0xe0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006dc:	2305      	movs	r3, #5
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	484b      	ldr	r0, [pc, #300]	; (8000814 <MX_GPIO_Init+0x304>)
 80006e8:	f000 fc02 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB13
                           PB14 PB15 PB4 PB5
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 80006ec:	f24f 13b3 	movw	r3, #61875	; 0xf1b3
 80006f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4845      	ldr	r0, [pc, #276]	; (8000818 <MX_GPIO_Init+0x308>)
 8000702:	f000 fbf5 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000706:	2304      	movs	r3, #4
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	483f      	ldr	r0, [pc, #252]	; (8000818 <MX_GPIO_Init+0x308>)
 800071a:	f000 fbe9 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800071e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000730:	2305      	movs	r3, #5
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4837      	ldr	r0, [pc, #220]	; (8000818 <MX_GPIO_Init+0x308>)
 800073c:	f000 fbd8 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD0
                           PD1 PD2 PD3 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0
 8000740:	f640 63cf 	movw	r3, #3791	; 0xecf
 8000744:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000746:	2303      	movs	r3, #3
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	482d      	ldr	r0, [pc, #180]	; (800080c <MX_GPIO_Init+0x2fc>)
 8000756:	f000 fbcb 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800075a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800075e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4826      	ldr	r0, [pc, #152]	; (800080c <MX_GPIO_Init+0x2fc>)
 8000774:	f000 fbbc 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000778:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800078a:	2306      	movs	r3, #6
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	481c      	ldr	r0, [pc, #112]	; (8000808 <MX_GPIO_Init+0x2f8>)
 8000796:	f000 fbab 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800079a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4819      	ldr	r0, [pc, #100]	; (8000814 <MX_GPIO_Init+0x304>)
 80007b0:	f000 fb9e 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80007b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007c6:	230a      	movs	r3, #10
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4810      	ldr	r0, [pc, #64]	; (8000814 <MX_GPIO_Init+0x304>)
 80007d2:	f000 fb8d 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007d6:	2320      	movs	r3, #32
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <MX_GPIO_Init+0x2fc>)
 80007ea:	f000 fb81 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f4:	2312      	movs	r3, #18
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
 80007fc:	e00e      	b.n	800081c <MX_GPIO_Init+0x30c>
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40021000 	.word	0x40021000
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	10120000 	.word	0x10120000
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000820:	2304      	movs	r3, #4
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_GPIO_Init+0x340>)
 800082c:	f000 fb60 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_GPIO_Init+0x344>)
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_GPIO_Init+0x348>)
 8000844:	f000 fb54 	bl	8000ef0 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3730      	adds	r7, #48	; 0x30
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020400 	.word	0x40020400
 8000854:	10120000 	.word	0x10120000
 8000858:	40021000 	.word	0x40021000

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 f9c9 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f827 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f7ff fe51 	bl	8000510 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800086e:	f000 f905 	bl	8000a7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // https://www.digikey.com/en/maker/projects/getting-started-with-stm32-introduction-to-freertos/ad275395687e4d85935351e16ec575b1
  const osThreadAttr_t appMain_attributes = {
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2224      	movs	r2, #36	; 0x24
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f004 fe16 	bl	80054aa <memset>
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <main+0x50>)
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	2318      	movs	r3, #24
 8000888:	61fb      	str	r3, [r7, #28]
	  .name = "appMain",
	  .priority = (osPriority_t) osPriorityNormal,
	  .stack_size = 128
  };

  appMain_handle = osThreadNew(appMain, NULL, &appMain_attributes);
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	461a      	mov	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <main+0x54>)
 8000892:	f002 f905 	bl	8002aa0 <osThreadNew>
 8000896:	4602      	mov	r2, r0
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <main+0x58>)
 800089a:	601a      	str	r2, [r3, #0]

  //osThreadCreate(thread_def, NULL);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800089c:	f002 f896 	bl	80029cc <osKernelInitialize>
  MX_FREERTOS_Init();
 80008a0:	f7ff fe1c 	bl	80004dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80008a4:	f002 f8c6 	bl	8002a34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <main+0x4c>
 80008aa:	bf00      	nop
 80008ac:	080054e0 	.word	0x080054e0
 80008b0:	080004d1 	.word	0x080004d1
 80008b4:	20004938 	.word	0x20004938

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	; 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fdef 	bl	80054aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <SystemClock_Config+0xcc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a27      	ldr	r2, [pc, #156]	; (8000984 <SystemClock_Config+0xcc>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <SystemClock_Config+0xd0>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000928:	2308      	movs	r3, #8
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800092c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fdf4 	bl	800152c <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800094a:	f000 f81f 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800095e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2105      	movs	r1, #5
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f8fd 	bl	8001b6c <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000978:	f000 f808 	bl	800098c <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	; 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f930 	bl	8000c9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a3c:	f003 fcc8 	bl	80043d0 <xTaskGetSchedulerState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d001      	beq.n	8000a4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a46:	f004 fa9f 	bl	8004f88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <SystemInit+0x28>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <SystemInit+0x28>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SystemInit+0x28>)
 8000a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART3_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	f001 faf4 	bl	80020a0 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f7ff ff65 	bl	800098c <Error_Handler>
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000493c 	.word	0x2000493c
 8000acc:	40004800 	.word	0x40004800

08000ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a29      	ldr	r2, [pc, #164]	; (8000b94 <HAL_UART_MspInit+0xc4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d14b      	bne.n	8000b8a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a27      	ldr	r2, [pc, #156]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0xc8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <HAL_UART_MspInit+0xcc>)
 8000b64:	f000 f9c4 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <HAL_UART_MspInit+0xd0>)
 8000b86:	f000 f9b3 	bl	8000ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020c00 	.word	0x40020c00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
  ldr  r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ff3f 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f004 fc3b 	bl	800544c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fe41 	bl	800085c <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000be0:	08005638 	.word	0x08005638
  ldr  r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000bec:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000bf0:	200049c0 	.word	0x200049c0

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f90d 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fec0 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f93c 	bl	8000ed8 <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f902 	bl	8000e80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	2000497c 	.word	0x2000497c

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000497c 	.word	0x2000497c

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b07      	cmp	r3, #7
 8000e4c:	d00f      	beq.n	8000e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b06      	cmp	r3, #6
 8000e52:	d00c      	beq.n	8000e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b05      	cmp	r3, #5
 8000e58:	d009      	beq.n	8000e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d006      	beq.n	8000e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d003      	beq.n	8000e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e66:	2192      	movs	r1, #146	; 0x92
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000e6a:	f7ff fd96 	bl	800099a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff34 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	080054e8 	.word	0x080054e8

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d903      	bls.n	8000ea0 <HAL_NVIC_SetPriority+0x20>
 8000e98:	21aa      	movs	r1, #170	; 0xaa
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <HAL_NVIC_SetPriority+0x54>)
 8000e9c:	f7ff fd7d 	bl	800099a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	d903      	bls.n	8000eae <HAL_NVIC_SetPriority+0x2e>
 8000ea6:	21ab      	movs	r1, #171	; 0xab
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <HAL_NVIC_SetPriority+0x54>)
 8000eaa:	f7ff fd76 	bl	800099a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eae:	f7ff ff39 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	6978      	ldr	r0, [r7, #20]
 8000eba:	f7ff ff6b 	bl	8000d94 <NVIC_EncodePriority>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff3a 	bl	8000d40 <__NVIC_SetPriority>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	080054e8 	.word	0x080054e8

08000ed8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff8b 	bl	8000dfc <SysTick_Config>
 8000ee6:	4603      	mov	r3, r0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a41      	ldr	r2, [pc, #260]	; (8001010 <HAL_GPIO_Init+0x120>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d023      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a40      	ldr	r2, [pc, #256]	; (8001014 <HAL_GPIO_Init+0x124>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a3f      	ldr	r2, [pc, #252]	; (8001018 <HAL_GPIO_Init+0x128>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01b      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a3e      	ldr	r2, [pc, #248]	; (800101c <HAL_GPIO_Init+0x12c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d017      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a3d      	ldr	r2, [pc, #244]	; (8001020 <HAL_GPIO_Init+0x130>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a3c      	ldr	r2, [pc, #240]	; (8001024 <HAL_GPIO_Init+0x134>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00f      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a3b      	ldr	r2, [pc, #236]	; (8001028 <HAL_GPIO_Init+0x138>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00b      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a3a      	ldr	r2, [pc, #232]	; (800102c <HAL_GPIO_Init+0x13c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a39      	ldr	r2, [pc, #228]	; (8001030 <HAL_GPIO_Init+0x140>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x66>
 8000f4e:	21b3      	movs	r1, #179	; 0xb3
 8000f50:	4838      	ldr	r0, [pc, #224]	; (8001034 <HAL_GPIO_Init+0x144>)
 8000f52:	f7ff fd22 	bl	800099a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x7c>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	041b      	lsls	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x84>
 8000f6c:	21b4      	movs	r1, #180	; 0xb4
 8000f6e:	4831      	ldr	r0, [pc, #196]	; (8001034 <HAL_GPIO_Init+0x144>)
 8000f70:	f7ff fd13 	bl	800099a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d035      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d031      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b11      	cmp	r3, #17
 8000f8a:	d02d      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d029      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b12      	cmp	r3, #18
 8000f9a:	d025      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4a25      	ldr	r2, [pc, #148]	; (8001038 <HAL_GPIO_Init+0x148>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d020      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4a24      	ldr	r2, [pc, #144]	; (800103c <HAL_GPIO_Init+0x14c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d01b      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <HAL_GPIO_Init+0x150>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d016      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <HAL_GPIO_Init+0x154>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d011      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_GPIO_Init+0x158>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00c      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_GPIO_Init+0x15c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0xf8>
 8000fe0:	21b5      	movs	r1, #181	; 0xb5
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <HAL_GPIO_Init+0x144>)
 8000fe4:	f7ff fcd9 	bl	800099a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <HAL_GPIO_Init+0x118>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x118>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x118>
 8001000:	21b6      	movs	r1, #182	; 0xb6
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <HAL_GPIO_Init+0x144>)
 8001004:	f7ff fcc9 	bl	800099a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	e23f      	b.n	800148e <HAL_GPIO_Init+0x59e>
 800100e:	bf00      	nop
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40021000 	.word	0x40021000
 8001024:	40021400 	.word	0x40021400
 8001028:	40021800 	.word	0x40021800
 800102c:	40021c00 	.word	0x40021c00
 8001030:	40022000 	.word	0x40022000
 8001034:	08005524 	.word	0x08005524
 8001038:	10110000 	.word	0x10110000
 800103c:	10210000 	.word	0x10210000
 8001040:	10310000 	.word	0x10310000
 8001044:	10120000 	.word	0x10120000
 8001048:	10220000 	.word	0x10220000
 800104c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 820d 	bne.w	8001488 <HAL_GPIO_Init+0x598>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d00b      	beq.n	800108e <HAL_GPIO_Init+0x19e>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	2b11      	cmp	r3, #17
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d144      	bne.n	8001118 <HAL_GPIO_Init+0x228>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00f      	beq.n	80010b6 <HAL_GPIO_Init+0x1c6>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d00b      	beq.n	80010b6 <HAL_GPIO_Init+0x1c6>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x1c6>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x1c6>
 80010ae:	21c8      	movs	r1, #200	; 0xc8
 80010b0:	489f      	ldr	r0, [pc, #636]	; (8001330 <HAL_GPIO_Init+0x440>)
 80010b2:	f7ff fc72 	bl	800099a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d004      	beq.n	800115a <HAL_GPIO_Init+0x26a>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b12      	cmp	r3, #18
 8001156:	f040 80bc 	bne.w	80012d2 <HAL_GPIO_Init+0x3e2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8093 	beq.w	800128a <HAL_GPIO_Init+0x39a>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	2b09      	cmp	r3, #9
 800116a:	f000 808e 	beq.w	800128a <HAL_GPIO_Init+0x39a>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8089 	beq.w	800128a <HAL_GPIO_Init+0x39a>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 8084 	beq.w	800128a <HAL_GPIO_Init+0x39a>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d07f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d07b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d077      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d073      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d06f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d06b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d067      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d063      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d05f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d05b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d057      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d053      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d04f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b09      	cmp	r3, #9
 80011f0:	d04b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d047      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d043      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b07      	cmp	r3, #7
 8001208:	d03f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b07      	cmp	r3, #7
 8001210:	d03b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b07      	cmp	r3, #7
 8001218:	d037      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b08      	cmp	r3, #8
 8001220:	d033      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d02f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b08      	cmp	r3, #8
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b09      	cmp	r3, #9
 8001238:	d027      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b09      	cmp	r3, #9
 8001240:	d023      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d01b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b0b      	cmp	r3, #11
 8001258:	d017      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b0c      	cmp	r3, #12
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d00f      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b0d      	cmp	r3, #13
 8001270:	d00b      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b0c      	cmp	r3, #12
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x39a>
 8001282:	21e0      	movs	r1, #224	; 0xe0
 8001284:	482a      	ldr	r0, [pc, #168]	; (8001330 <HAL_GPIO_Init+0x440>)
 8001286:	f7ff fb88 	bl	800099a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	69b9      	ldr	r1, [r7, #24]
 80012ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0203 	and.w	r2, r3, #3
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 80ba 	beq.w	8001488 <HAL_GPIO_Init+0x598>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_GPIO_Init+0x444>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_GPIO_Init+0x444>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	6453      	str	r3, [r2, #68]	; 0x44
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GPIO_Init+0x444>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x448>
 800132e:	bf00      	nop
 8001330:	08005524 	.word	0x08005524
 8001334:	40023800 	.word	0x40023800
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133c:	4a58      	ldr	r2, [pc, #352]	; (80014a0 <HAL_GPIO_Init+0x5b0>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <HAL_GPIO_Init+0x5b4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d02b      	beq.n	80013c0 <HAL_GPIO_Init+0x4d0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_GPIO_Init+0x5b8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d025      	beq.n	80013bc <HAL_GPIO_Init+0x4cc>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <HAL_GPIO_Init+0x5bc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d01f      	beq.n	80013b8 <HAL_GPIO_Init+0x4c8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <HAL_GPIO_Init+0x5c0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d019      	beq.n	80013b4 <HAL_GPIO_Init+0x4c4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x5c4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d013      	beq.n	80013b0 <HAL_GPIO_Init+0x4c0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_GPIO_Init+0x5c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d00d      	beq.n	80013ac <HAL_GPIO_Init+0x4bc>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <HAL_GPIO_Init+0x5cc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0x4b8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <HAL_GPIO_Init+0x5d0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d101      	bne.n	80013a4 <HAL_GPIO_Init+0x4b4>
 80013a0:	2307      	movs	r3, #7
 80013a2:	e00e      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013a4:	2308      	movs	r3, #8
 80013a6:	e00c      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013a8:	2306      	movs	r3, #6
 80013aa:	e00a      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013ac:	2305      	movs	r3, #5
 80013ae:	e008      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013b0:	2304      	movs	r3, #4
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e004      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_GPIO_Init+0x4d2>
 80013c0:	2300      	movs	r3, #0
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	f002 0203 	and.w	r2, r2, #3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d2:	4933      	ldr	r1, [pc, #204]	; (80014a0 <HAL_GPIO_Init+0x5b0>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x514>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001404:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x53e>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x568>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001458:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x592>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_GPIO_Init+0x5d4>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	f67f addd 	bls.w	8001050 <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <HAL_GPIO_WritePin+0x20>
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	0c1b      	lsrs	r3, r3, #16
 80014e2:	041b      	lsls	r3, r3, #16
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <HAL_GPIO_WritePin+0x2a>
 80014e8:	f240 119f 	movw	r1, #415	; 0x19f
 80014ec:	480e      	ldr	r0, [pc, #56]	; (8001528 <HAL_GPIO_WritePin+0x60>)
 80014ee:	f7ff fa54 	bl	800099a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80014f2:	787b      	ldrb	r3, [r7, #1]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_GPIO_WritePin+0x40>
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d004      	beq.n	8001508 <HAL_GPIO_WritePin+0x40>
 80014fe:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <HAL_GPIO_WritePin+0x60>)
 8001504:	f7ff fa49 	bl	800099a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	08005524 	.word	0x08005524

0800152c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e30d      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	d903      	bls.n	800154e <HAL_RCC_OscConfig+0x22>
 8001546:	21e8      	movs	r1, #232	; 0xe8
 8001548:	48a3      	ldr	r0, [pc, #652]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	f7ff fa26 	bl	800099a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8088 	beq.w	800166c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00d      	beq.n	8001580 <HAL_RCC_OscConfig+0x54>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d008      	beq.n	8001580 <HAL_RCC_OscConfig+0x54>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001576:	d003      	beq.n	8001580 <HAL_RCC_OscConfig+0x54>
 8001578:	21ed      	movs	r1, #237	; 0xed
 800157a:	4897      	ldr	r0, [pc, #604]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f7ff fa0d 	bl	800099a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001580:	4b96      	ldr	r3, [pc, #600]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158c:	4b93      	ldr	r3, [pc, #588]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001594:	2b08      	cmp	r3, #8
 8001596:	d112      	bne.n	80015be <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001598:	4b90      	ldr	r3, [pc, #576]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b8d      	ldr	r3, [pc, #564]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d05b      	beq.n	800166a <HAL_RCC_OscConfig+0x13e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d157      	bne.n	800166a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e2cd      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0xaa>
 80015c8:	4b84      	ldr	r3, [pc, #528]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a83      	ldr	r2, [pc, #524]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e01d      	b.n	8001612 <HAL_RCC_OscConfig+0xe6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0xce>
 80015e0:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a7d      	ldr	r2, [pc, #500]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a7a      	ldr	r2, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0xe6>
 80015fa:	4b78      	ldr	r3, [pc, #480]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a77      	ldr	r2, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a74      	ldr	r2, [pc, #464]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d013      	beq.n	8001642 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fb53 	bl	8000cc4 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001622:	f7ff fb4f 	bl	8000cc4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e292      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0xf6>
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb3f 	bl	8000cc4 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164a:	f7ff fb3b 	bl	8000cc4 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e27e      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165c:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x11e>
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d079      	beq.n	800176c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_OscConfig+0x166>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d004      	beq.n	8001692 <HAL_RCC_OscConfig+0x166>
 8001688:	f240 111f 	movw	r1, #287	; 0x11f
 800168c:	4852      	ldr	r0, [pc, #328]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800168e:	f7ff f984 	bl	800099a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b1f      	cmp	r3, #31
 8001698:	d904      	bls.n	80016a4 <HAL_RCC_OscConfig+0x178>
 800169a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800169e:	484e      	ldr	r0, [pc, #312]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	f7ff f97b 	bl	800099a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d11c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016bc:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c8:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1b4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e23c      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	493b      	ldr	r1, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f4:	e03a      	b.n	800176c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d020      	beq.n	8001740 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_RCC_OscConfig+0x2b4>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fade 	bl	8000cc4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fada 	bl	8000cc4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e21d      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4928      	ldr	r1, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
 800173e:	e015      	b.n	800176c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x2b4>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fabd 	bl	8000cc4 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fab9 	bl	8000cc4 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1fc      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d046      	beq.n	8001806 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_RCC_OscConfig+0x266>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d004      	beq.n	8001792 <HAL_RCC_OscConfig+0x266>
 8001788:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800178c:	4812      	ldr	r0, [pc, #72]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800178e:	f7ff f904 	bl	800099a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_OscConfig+0x2b8>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa90 	bl	8000cc4 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fa8c 	bl	8000cc4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1cf      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x27c>
 80017c6:	e01e      	b.n	8001806 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x2b8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fa79 	bl	8000cc4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	e011      	b.n	80017fa <HAL_RCC_OscConfig+0x2ce>
 80017d6:	bf00      	nop
 80017d8:	08005560 	.word	0x08005560
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470000 	.word	0x42470000
 80017e4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fa6c 	bl	8000cc4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1af      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fa:	4b97      	ldr	r3, [pc, #604]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80017fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80a8 	beq.w	8001964 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x30e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d008      	beq.n	800183a <HAL_RCC_OscConfig+0x30e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d004      	beq.n	800183a <HAL_RCC_OscConfig+0x30e>
 8001830:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001834:	4889      	ldr	r0, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x530>)
 8001836:	f7ff f8b0 	bl	800099a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b87      	ldr	r3, [pc, #540]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10f      	bne.n	8001866 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b83      	ldr	r3, [pc, #524]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a82      	ldr	r2, [pc, #520]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b7e      	ldr	r3, [pc, #504]	; (8001a60 <HAL_RCC_OscConfig+0x534>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b7b      	ldr	r3, [pc, #492]	; (8001a60 <HAL_RCC_OscConfig+0x534>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7a      	ldr	r2, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x534>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff fa21 	bl	8000cc4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fa1d 	bl	8000cc4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e160      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b71      	ldr	r3, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x534>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x38e>
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a69      	ldr	r2, [pc, #420]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x3b0>
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	4a64      	ldr	r2, [pc, #400]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6713      	str	r3, [r2, #112]	; 0x70
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a5d      	ldr	r2, [pc, #372]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d015      	beq.n	8001928 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f9e2 	bl	8000cc4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff f9de 	bl	8000cc4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e11f      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191a:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0ee      	beq.n	8001904 <HAL_RCC_OscConfig+0x3d8>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff f9cc 	bl	8000cc4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f9c8 	bl	8000cc4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e109      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ee      	bne.n	8001930 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	4a3e      	ldr	r2, [pc, #248]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <HAL_RCC_OscConfig+0x45a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d008      	beq.n	8001986 <HAL_RCC_OscConfig+0x45a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d004      	beq.n	8001986 <HAL_RCC_OscConfig+0x45a>
 800197c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001980:	4836      	ldr	r0, [pc, #216]	; (8001a5c <HAL_RCC_OscConfig+0x530>)
 8001982:	f7ff f80a 	bl	800099a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80e4 	beq.w	8001b58 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x52c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	f000 80ae 	beq.w	8001afa <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	f040 8092 	bne.w	8001acc <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d009      	beq.n	80019c4 <HAL_RCC_OscConfig+0x498>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b8:	d004      	beq.n	80019c4 <HAL_RCC_OscConfig+0x498>
 80019ba:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80019be:	4827      	ldr	r0, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x530>)
 80019c0:	f7fe ffeb 	bl	800099a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	2b3f      	cmp	r3, #63	; 0x3f
 80019ca:	d904      	bls.n	80019d6 <HAL_RCC_OscConfig+0x4aa>
 80019cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80019d0:	4822      	ldr	r0, [pc, #136]	; (8001a5c <HAL_RCC_OscConfig+0x530>)
 80019d2:	f7fe ffe2 	bl	800099a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b31      	cmp	r3, #49	; 0x31
 80019dc:	d904      	bls.n	80019e8 <HAL_RCC_OscConfig+0x4bc>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80019e6:	d904      	bls.n	80019f2 <HAL_RCC_OscConfig+0x4c6>
 80019e8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80019ec:	481b      	ldr	r0, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x530>)
 80019ee:	f7fe ffd4 	bl	800099a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d010      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4f0>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d00c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4f0>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d008      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4f0>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d004      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4f0>
 8001a12:	f240 11db 	movw	r1, #475	; 0x1db
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x530>)
 8001a18:	f7fe ffbf 	bl	800099a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d903      	bls.n	8001a2c <HAL_RCC_OscConfig+0x500>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d904      	bls.n	8001a36 <HAL_RCC_OscConfig+0x50a>
 8001a2c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001a30:	480a      	ldr	r0, [pc, #40]	; (8001a5c <HAL_RCC_OscConfig+0x530>)
 8001a32:	f7fe ffb2 	bl	800099a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_OscConfig+0x538>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f942 	bl	8000cc4 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e011      	b.n	8001a68 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f93e 	bl	8000cc4 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d90a      	bls.n	8001a68 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e081      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08005560 	.word	0x08005560
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a68:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <HAL_RCC_OscConfig+0x638>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e7      	bne.n	8001a44 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	019b      	lsls	r3, r3, #6
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	4932      	ldr	r1, [pc, #200]	; (8001b64 <HAL_RCC_OscConfig+0x638>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9e:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <HAL_RCC_OscConfig+0x63c>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f90e 	bl	8000cc4 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f90a 	bl	8000cc4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e04d      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCC_OscConfig+0x638>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x580>
 8001aca:	e045      	b.n	8001b58 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_OscConfig+0x63c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f8f7 	bl	8000cc4 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f8f3 	bl	8000cc4 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e036      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x638>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x5ae>
 8001af8:	e02e      	b.n	8001b58 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e029      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_RCC_OscConfig+0x638>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d115      	bne.n	8001b54 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d10d      	bne.n	8001b54 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	42470060 	.word	0x42470060

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e174      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x24>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d904      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x2e>
 8001b90:	f240 2151 	movw	r1, #593	; 0x251
 8001b94:	487b      	ldr	r0, [pc, #492]	; (8001d84 <HAL_RCC_ClockConfig+0x218>)
 8001b96:	f7fe ff00 	bl	800099a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d007      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	d004      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
 8001bca:	f240 2152 	movw	r1, #594	; 0x252
 8001bce:	486d      	ldr	r0, [pc, #436]	; (8001d84 <HAL_RCC_ClockConfig+0x218>)
 8001bd0:	f7fe fee3 	bl	800099a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <HAL_RCC_ClockConfig+0x21c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90c      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <HAL_RCC_ClockConfig+0x21c>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <HAL_RCC_ClockConfig+0x21c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e136      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d049      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a5c      	ldr	r2, [pc, #368]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d024      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b80      	cmp	r3, #128	; 0x80
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b90      	cmp	r3, #144	; 0x90
 8001c4e:	d01c      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2ba0      	cmp	r3, #160	; 0xa0
 8001c56:	d018      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2bb0      	cmp	r3, #176	; 0xb0
 8001c5e:	d014      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2bc0      	cmp	r3, #192	; 0xc0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2bd0      	cmp	r3, #208	; 0xd0
 8001c6e:	d00c      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2be0      	cmp	r3, #224	; 0xe0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2bf0      	cmp	r3, #240	; 0xf0
 8001c7e:	d004      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x11e>
 8001c80:	f240 2175 	movw	r1, #629	; 0x275
 8001c84:	483f      	ldr	r0, [pc, #252]	; (8001d84 <HAL_RCC_ClockConfig+0x218>)
 8001c86:	f7fe fe88 	bl	800099a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8a:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	493d      	ldr	r1, [pc, #244]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d059      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d010      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x166>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x166>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x166>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d004      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x166>
 8001cc8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8001ccc:	482d      	ldr	r0, [pc, #180]	; (8001d84 <HAL_RCC_ClockConfig+0x218>)
 8001cce:	f7fe fe64 	bl	800099a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0bf      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0af      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0a7      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4919      	ldr	r1, [pc, #100]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7fe ffca 	bl	8000cc4 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe ffc6 	bl	8000cc4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e08f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCC_ClockConfig+0x220>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x21c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d212      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_RCC_ClockConfig+0x21c>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_ClockConfig+0x21c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d007      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e072      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2fe>
 8001d84:	08005560 	.word	0x08005560
 8001d88:	40023c00 	.word	0x40023c00
 8001d8c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d025      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d018      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x26a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dac:	d013      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x26a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001db6:	d00e      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x26a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x26a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001dca:	d004      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x26a>
 8001dcc:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001dd0:	4828      	ldr	r0, [pc, #160]	; (8001e74 <HAL_RCC_ClockConfig+0x308>)
 8001dd2:	f7fe fde2 	bl	800099a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_RCC_ClockConfig+0x30c>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4925      	ldr	r1, [pc, #148]	; (8001e78 <HAL_RCC_ClockConfig+0x30c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d026      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d018      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e04:	d013      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001e0e:	d00e      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e18:	d009      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001e22:	d004      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
 8001e24:	f240 21c1 	movw	r1, #705	; 0x2c1
 8001e28:	4812      	ldr	r0, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x308>)
 8001e2a:	f7fe fdb6 	bl	800099a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_ClockConfig+0x30c>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_RCC_ClockConfig+0x30c>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e42:	f000 f821 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e46:	4601      	mov	r1, r0
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_ClockConfig+0x30c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x310>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	fa21 f303 	lsr.w	r3, r1, r3
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x314>)
 8001e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x318>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe feea 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	08005560 	.word	0x08005560
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	08005610 	.word	0x08005610
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d007      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x32>
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x38>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80b4 	bne.w	800201c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001eb6:	60bb      	str	r3, [r7, #8]
       break;
 8001eb8:	e0b3      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eba:	4b5e      	ldr	r3, [pc, #376]	; (8002034 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ebc:	60bb      	str	r3, [r7, #8]
      break;
 8001ebe:	e0b0      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec0:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eca:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d04a      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b55      	ldr	r3, [pc, #340]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	f04f 0400 	mov.w	r4, #0
 8001ee0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	ea03 0501 	and.w	r5, r3, r1
 8001eec:	ea04 0602 	and.w	r6, r4, r2
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	4632      	mov	r2, r6
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f04f 0400 	mov.w	r4, #0
 8001efc:	0154      	lsls	r4, r2, #5
 8001efe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f02:	014b      	lsls	r3, r1, #5
 8001f04:	4619      	mov	r1, r3
 8001f06:	4622      	mov	r2, r4
 8001f08:	1b49      	subs	r1, r1, r5
 8001f0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f04f 0400 	mov.w	r4, #0
 8001f16:	0194      	lsls	r4, r2, #6
 8001f18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f1c:	018b      	lsls	r3, r1, #6
 8001f1e:	1a5b      	subs	r3, r3, r1
 8001f20:	eb64 0402 	sbc.w	r4, r4, r2
 8001f24:	f04f 0100 	mov.w	r1, #0
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	00e2      	lsls	r2, r4, #3
 8001f2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f32:	00d9      	lsls	r1, r3, #3
 8001f34:	460b      	mov	r3, r1
 8001f36:	4614      	mov	r4, r2
 8001f38:	195b      	adds	r3, r3, r5
 8001f3a:	eb44 0406 	adc.w	r4, r4, r6
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	0262      	lsls	r2, r4, #9
 8001f48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f4c:	0259      	lsls	r1, r3, #9
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4614      	mov	r4, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	4621      	mov	r1, r4
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f04f 0400 	mov.w	r4, #0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4623      	mov	r3, r4
 8001f60:	f7fe f936 	bl	80001d0 <__aeabi_uldivmod>
 8001f64:	4603      	mov	r3, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e049      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	099b      	lsrs	r3, r3, #6
 8001f72:	f04f 0400 	mov.w	r4, #0
 8001f76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	ea03 0501 	and.w	r5, r3, r1
 8001f82:	ea04 0602 	and.w	r6, r4, r2
 8001f86:	4629      	mov	r1, r5
 8001f88:	4632      	mov	r2, r6
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	f04f 0400 	mov.w	r4, #0
 8001f92:	0154      	lsls	r4, r2, #5
 8001f94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f98:	014b      	lsls	r3, r1, #5
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	1b49      	subs	r1, r1, r5
 8001fa0:	eb62 0206 	sbc.w	r2, r2, r6
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	f04f 0400 	mov.w	r4, #0
 8001fac:	0194      	lsls	r4, r2, #6
 8001fae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb2:	018b      	lsls	r3, r1, #6
 8001fb4:	1a5b      	subs	r3, r3, r1
 8001fb6:	eb64 0402 	sbc.w	r4, r4, r2
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	00e2      	lsls	r2, r4, #3
 8001fc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fc8:	00d9      	lsls	r1, r3, #3
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4614      	mov	r4, r2
 8001fce:	195b      	adds	r3, r3, r5
 8001fd0:	eb44 0406 	adc.w	r4, r4, r6
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	02a2      	lsls	r2, r4, #10
 8001fde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fe2:	0299      	lsls	r1, r3, #10
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4621      	mov	r1, r4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f04f 0400 	mov.w	r4, #0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4623      	mov	r3, r4
 8001ff6:	f7fe f8eb 	bl	80001d0 <__aeabi_uldivmod>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	3301      	adds	r3, #1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	60bb      	str	r3, [r7, #8]
      break;
 800201a:	e002      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800201e:	60bb      	str	r3, [r7, #8]
      break;
 8002020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002022:	68bb      	ldr	r3, [r7, #8]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4601      	mov	r1, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a9b      	lsrs	r3, r3, #10
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	fa21 f303 	lsr.w	r3, r1, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08005620 	.word	0x08005620

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffdc 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002080:	4601      	mov	r1, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	08005620 	.word	0x08005620

080020a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0b4      	b.n	800221c <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d031      	beq.n	800211e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a59      	ldr	r2, [pc, #356]	; (8002224 <HAL_UART_Init+0x184>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_UART_Init+0x4c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_UART_Init+0x188>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_UART_Init+0x4c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_UART_Init+0x18c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_UART_Init+0x4c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a54      	ldr	r2, [pc, #336]	; (8002230 <HAL_UART_Init+0x190>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_UART_Init+0x4c>
 80020e2:	f240 114b 	movw	r1, #331	; 0x14b
 80020e6:	4853      	ldr	r0, [pc, #332]	; (8002234 <HAL_UART_Init+0x194>)
 80020e8:	f7fe fc57 	bl	800099a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d037      	beq.n	8002164 <HAL_UART_Init+0xc4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fc:	d032      	beq.n	8002164 <HAL_UART_Init+0xc4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002106:	d02d      	beq.n	8002164 <HAL_UART_Init+0xc4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002110:	d028      	beq.n	8002164 <HAL_UART_Init+0xc4>
 8002112:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002116:	4847      	ldr	r0, [pc, #284]	; (8002234 <HAL_UART_Init+0x194>)
 8002118:	f7fe fc3f 	bl	800099a <assert_failed>
 800211c:	e022      	b.n	8002164 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_UART_Init+0x184>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01d      	beq.n	8002164 <HAL_UART_Init+0xc4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <HAL_UART_Init+0x188>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_UART_Init+0xc4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a3d      	ldr	r2, [pc, #244]	; (800222c <HAL_UART_Init+0x18c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_UART_Init+0xc4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <HAL_UART_Init+0x198>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_UART_Init+0xc4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <HAL_UART_Init+0x19c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_UART_Init+0xc4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a36      	ldr	r2, [pc, #216]	; (8002230 <HAL_UART_Init+0x190>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_UART_Init+0xc4>
 800215a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800215e:	4835      	ldr	r0, [pc, #212]	; (8002234 <HAL_UART_Init+0x194>)
 8002160:	f7fe fc1b 	bl	800099a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HAL_UART_Init+0xe0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002174:	d004      	beq.n	8002180 <HAL_UART_Init+0xe0>
 8002176:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800217a:	482e      	ldr	r0, [pc, #184]	; (8002234 <HAL_UART_Init+0x194>)
 800217c:	f7fe fc0d 	bl	800099a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_UART_Init+0xfc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002190:	d004      	beq.n	800219c <HAL_UART_Init+0xfc>
 8002192:	f240 1153 	movw	r1, #339	; 0x153
 8002196:	4827      	ldr	r0, [pc, #156]	; (8002234 <HAL_UART_Init+0x194>)
 8002198:	f7fe fbff 	bl	800099a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7fe fc8d 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2224      	movs	r2, #36	; 0x24
 80021ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f836 	bl	8002240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002202:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40011000 	.word	0x40011000
 8002228:	40004400 	.word	0x40004400
 800222c:	40004800 	.word	0x40004800
 8002230:	40011400 	.word	0x40011400
 8002234:	08005598 	.word	0x08005598
 8002238:	40004c00 	.word	0x40004c00
 800223c:	40005000 	.word	0x40005000

08002240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a9a      	ldr	r2, [pc, #616]	; (80024b8 <UART_SetConfig+0x278>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d904      	bls.n	800225e <UART_SetConfig+0x1e>
 8002254:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8002258:	4898      	ldr	r0, [pc, #608]	; (80024bc <UART_SetConfig+0x27c>)
 800225a:	f7fe fb9e 	bl	800099a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <UART_SetConfig+0x3a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226e:	d004      	beq.n	800227a <UART_SetConfig+0x3a>
 8002270:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8002274:	4891      	ldr	r0, [pc, #580]	; (80024bc <UART_SetConfig+0x27c>)
 8002276:	f7fe fb90 	bl	800099a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00e      	beq.n	80022a0 <UART_SetConfig+0x60>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d009      	beq.n	80022a0 <UART_SetConfig+0x60>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002294:	d004      	beq.n	80022a0 <UART_SetConfig+0x60>
 8002296:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800229a:	4888      	ldr	r0, [pc, #544]	; (80024bc <UART_SetConfig+0x27c>)
 800229c:	f7fe fb7d 	bl	800099a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <UART_SetConfig+0x76>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <UART_SetConfig+0x80>
 80022b6:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80022ba:	4880      	ldr	r0, [pc, #512]	; (80024bc <UART_SetConfig+0x27c>)
 80022bc:	f7fe fb6d 	bl	800099a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022f8:	f023 030c 	bic.w	r3, r3, #12
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	68f9      	ldr	r1, [r7, #12]
 8002302:	430b      	orrs	r3, r1
 8002304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002324:	f040 818f 	bne.w	8002646 <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a64      	ldr	r2, [pc, #400]	; (80024c0 <UART_SetConfig+0x280>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d005      	beq.n	800233e <UART_SetConfig+0xfe>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <UART_SetConfig+0x284>)
 8002338:	4293      	cmp	r3, r2
 800233a:	f040 80c7 	bne.w	80024cc <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800233e:	f7ff fe9b 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8002342:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	461d      	mov	r5, r3
 8002348:	f04f 0600 	mov.w	r6, #0
 800234c:	46a8      	mov	r8, r5
 800234e:	46b1      	mov	r9, r6
 8002350:	eb18 0308 	adds.w	r3, r8, r8
 8002354:	eb49 0409 	adc.w	r4, r9, r9
 8002358:	4698      	mov	r8, r3
 800235a:	46a1      	mov	r9, r4
 800235c:	eb18 0805 	adds.w	r8, r8, r5
 8002360:	eb49 0906 	adc.w	r9, r9, r6
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002370:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002374:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002378:	4688      	mov	r8, r1
 800237a:	4691      	mov	r9, r2
 800237c:	eb18 0005 	adds.w	r0, r8, r5
 8002380:	eb49 0106 	adc.w	r1, r9, r6
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	461d      	mov	r5, r3
 800238a:	f04f 0600 	mov.w	r6, #0
 800238e:	196b      	adds	r3, r5, r5
 8002390:	eb46 0406 	adc.w	r4, r6, r6
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	f7fd ff1a 	bl	80001d0 <__aeabi_uldivmod>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b49      	ldr	r3, [pc, #292]	; (80024c8 <UART_SetConfig+0x288>)
 80023a4:	fba3 2302 	umull	r2, r3, r3, r2
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	461d      	mov	r5, r3
 80023b2:	f04f 0600 	mov.w	r6, #0
 80023b6:	46a9      	mov	r9, r5
 80023b8:	46b2      	mov	sl, r6
 80023ba:	eb19 0309 	adds.w	r3, r9, r9
 80023be:	eb4a 040a 	adc.w	r4, sl, sl
 80023c2:	4699      	mov	r9, r3
 80023c4:	46a2      	mov	sl, r4
 80023c6:	eb19 0905 	adds.w	r9, r9, r5
 80023ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80023ce:	f04f 0100 	mov.w	r1, #0
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023e2:	4689      	mov	r9, r1
 80023e4:	4692      	mov	sl, r2
 80023e6:	eb19 0005 	adds.w	r0, r9, r5
 80023ea:	eb4a 0106 	adc.w	r1, sl, r6
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	461d      	mov	r5, r3
 80023f4:	f04f 0600 	mov.w	r6, #0
 80023f8:	196b      	adds	r3, r5, r5
 80023fa:	eb46 0406 	adc.w	r4, r6, r6
 80023fe:	461a      	mov	r2, r3
 8002400:	4623      	mov	r3, r4
 8002402:	f7fd fee5 	bl	80001d0 <__aeabi_uldivmod>
 8002406:	4603      	mov	r3, r0
 8002408:	460c      	mov	r4, r1
 800240a:	461a      	mov	r2, r3
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <UART_SetConfig+0x288>)
 800240e:	fba3 1302 	umull	r1, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2164      	movs	r1, #100	; 0x64
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	3332      	adds	r3, #50	; 0x32
 8002420:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <UART_SetConfig+0x288>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800242e:	4498      	add	r8, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	461d      	mov	r5, r3
 8002434:	f04f 0600 	mov.w	r6, #0
 8002438:	46a9      	mov	r9, r5
 800243a:	46b2      	mov	sl, r6
 800243c:	eb19 0309 	adds.w	r3, r9, r9
 8002440:	eb4a 040a 	adc.w	r4, sl, sl
 8002444:	4699      	mov	r9, r3
 8002446:	46a2      	mov	sl, r4
 8002448:	eb19 0905 	adds.w	r9, r9, r5
 800244c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800245c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002464:	4689      	mov	r9, r1
 8002466:	4692      	mov	sl, r2
 8002468:	eb19 0005 	adds.w	r0, r9, r5
 800246c:	eb4a 0106 	adc.w	r1, sl, r6
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	461d      	mov	r5, r3
 8002476:	f04f 0600 	mov.w	r6, #0
 800247a:	196b      	adds	r3, r5, r5
 800247c:	eb46 0406 	adc.w	r4, r6, r6
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	f7fd fea4 	bl	80001d0 <__aeabi_uldivmod>
 8002488:	4603      	mov	r3, r0
 800248a:	460c      	mov	r4, r1
 800248c:	461a      	mov	r2, r3
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <UART_SetConfig+0x288>)
 8002490:	fba3 1302 	umull	r1, r3, r3, r2
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	2164      	movs	r1, #100	; 0x64
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	3332      	adds	r3, #50	; 0x32
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <UART_SetConfig+0x288>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	f003 0207 	and.w	r2, r3, #7
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4442      	add	r2, r8
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	e27a      	b.n	80029ae <UART_SetConfig+0x76e>
 80024b8:	00a037a0 	.word	0x00a037a0
 80024bc:	08005598 	.word	0x08005598
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40011400 	.word	0x40011400
 80024c8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024cc:	f7ff fdc0 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 80024d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	461d      	mov	r5, r3
 80024d6:	f04f 0600 	mov.w	r6, #0
 80024da:	46a8      	mov	r8, r5
 80024dc:	46b1      	mov	r9, r6
 80024de:	eb18 0308 	adds.w	r3, r8, r8
 80024e2:	eb49 0409 	adc.w	r4, r9, r9
 80024e6:	4698      	mov	r8, r3
 80024e8:	46a1      	mov	r9, r4
 80024ea:	eb18 0805 	adds.w	r8, r8, r5
 80024ee:	eb49 0906 	adc.w	r9, r9, r6
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002502:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002506:	4688      	mov	r8, r1
 8002508:	4691      	mov	r9, r2
 800250a:	eb18 0005 	adds.w	r0, r8, r5
 800250e:	eb49 0106 	adc.w	r1, r9, r6
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	461d      	mov	r5, r3
 8002518:	f04f 0600 	mov.w	r6, #0
 800251c:	196b      	adds	r3, r5, r5
 800251e:	eb46 0406 	adc.w	r4, r6, r6
 8002522:	461a      	mov	r2, r3
 8002524:	4623      	mov	r3, r4
 8002526:	f7fd fe53 	bl	80001d0 <__aeabi_uldivmod>
 800252a:	4603      	mov	r3, r0
 800252c:	460c      	mov	r4, r1
 800252e:	461a      	mov	r2, r3
 8002530:	4bb3      	ldr	r3, [pc, #716]	; (8002800 <UART_SetConfig+0x5c0>)
 8002532:	fba3 2302 	umull	r2, r3, r3, r2
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	461d      	mov	r5, r3
 8002540:	f04f 0600 	mov.w	r6, #0
 8002544:	46a9      	mov	r9, r5
 8002546:	46b2      	mov	sl, r6
 8002548:	eb19 0309 	adds.w	r3, r9, r9
 800254c:	eb4a 040a 	adc.w	r4, sl, sl
 8002550:	4699      	mov	r9, r3
 8002552:	46a2      	mov	sl, r4
 8002554:	eb19 0905 	adds.w	r9, r9, r5
 8002558:	eb4a 0a06 	adc.w	sl, sl, r6
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002568:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800256c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002570:	4689      	mov	r9, r1
 8002572:	4692      	mov	sl, r2
 8002574:	eb19 0005 	adds.w	r0, r9, r5
 8002578:	eb4a 0106 	adc.w	r1, sl, r6
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	461d      	mov	r5, r3
 8002582:	f04f 0600 	mov.w	r6, #0
 8002586:	196b      	adds	r3, r5, r5
 8002588:	eb46 0406 	adc.w	r4, r6, r6
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	f7fd fe1e 	bl	80001d0 <__aeabi_uldivmod>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	461a      	mov	r2, r3
 800259a:	4b99      	ldr	r3, [pc, #612]	; (8002800 <UART_SetConfig+0x5c0>)
 800259c:	fba3 1302 	umull	r1, r3, r3, r2
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	2164      	movs	r1, #100	; 0x64
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	3332      	adds	r3, #50	; 0x32
 80025ae:	4a94      	ldr	r2, [pc, #592]	; (8002800 <UART_SetConfig+0x5c0>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025bc:	4498      	add	r8, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	461d      	mov	r5, r3
 80025c2:	f04f 0600 	mov.w	r6, #0
 80025c6:	46a9      	mov	r9, r5
 80025c8:	46b2      	mov	sl, r6
 80025ca:	eb19 0309 	adds.w	r3, r9, r9
 80025ce:	eb4a 040a 	adc.w	r4, sl, sl
 80025d2:	4699      	mov	r9, r3
 80025d4:	46a2      	mov	sl, r4
 80025d6:	eb19 0905 	adds.w	r9, r9, r5
 80025da:	eb4a 0a06 	adc.w	sl, sl, r6
 80025de:	f04f 0100 	mov.w	r1, #0
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025f2:	4689      	mov	r9, r1
 80025f4:	4692      	mov	sl, r2
 80025f6:	eb19 0005 	adds.w	r0, r9, r5
 80025fa:	eb4a 0106 	adc.w	r1, sl, r6
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	461d      	mov	r5, r3
 8002604:	f04f 0600 	mov.w	r6, #0
 8002608:	196b      	adds	r3, r5, r5
 800260a:	eb46 0406 	adc.w	r4, r6, r6
 800260e:	461a      	mov	r2, r3
 8002610:	4623      	mov	r3, r4
 8002612:	f7fd fddd 	bl	80001d0 <__aeabi_uldivmod>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	461a      	mov	r2, r3
 800261c:	4b78      	ldr	r3, [pc, #480]	; (8002800 <UART_SetConfig+0x5c0>)
 800261e:	fba3 1302 	umull	r1, r3, r3, r2
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2164      	movs	r1, #100	; 0x64
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	3332      	adds	r3, #50	; 0x32
 8002630:	4a73      	ldr	r2, [pc, #460]	; (8002800 <UART_SetConfig+0x5c0>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	f003 0207 	and.w	r2, r3, #7
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4442      	add	r2, r8
 8002642:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002644:	e1b3      	b.n	80029ae <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <UART_SetConfig+0x5c4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d005      	beq.n	800265c <UART_SetConfig+0x41c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6c      	ldr	r2, [pc, #432]	; (8002808 <UART_SetConfig+0x5c8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	f040 80d8 	bne.w	800280c <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 800265c:	f7ff fd0c 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8002660:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	469a      	mov	sl, r3
 8002666:	f04f 0b00 	mov.w	fp, #0
 800266a:	46d0      	mov	r8, sl
 800266c:	46d9      	mov	r9, fp
 800266e:	eb18 0308 	adds.w	r3, r8, r8
 8002672:	eb49 0409 	adc.w	r4, r9, r9
 8002676:	4698      	mov	r8, r3
 8002678:	46a1      	mov	r9, r4
 800267a:	eb18 080a 	adds.w	r8, r8, sl
 800267e:	eb49 090b 	adc.w	r9, r9, fp
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800268e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002692:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002696:	4688      	mov	r8, r1
 8002698:	4691      	mov	r9, r2
 800269a:	eb1a 0508 	adds.w	r5, sl, r8
 800269e:	eb4b 0609 	adc.w	r6, fp, r9
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4619      	mov	r1, r3
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f04f 0400 	mov.w	r4, #0
 80026b4:	0094      	lsls	r4, r2, #2
 80026b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026ba:	008b      	lsls	r3, r1, #2
 80026bc:	461a      	mov	r2, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	4628      	mov	r0, r5
 80026c2:	4631      	mov	r1, r6
 80026c4:	f7fd fd84 	bl	80001d0 <__aeabi_uldivmod>
 80026c8:	4603      	mov	r3, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <UART_SetConfig+0x5c0>)
 80026d0:	fba3 2302 	umull	r2, r3, r3, r2
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	469b      	mov	fp, r3
 80026de:	f04f 0c00 	mov.w	ip, #0
 80026e2:	46d9      	mov	r9, fp
 80026e4:	46e2      	mov	sl, ip
 80026e6:	eb19 0309 	adds.w	r3, r9, r9
 80026ea:	eb4a 040a 	adc.w	r4, sl, sl
 80026ee:	4699      	mov	r9, r3
 80026f0:	46a2      	mov	sl, r4
 80026f2:	eb19 090b 	adds.w	r9, r9, fp
 80026f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002706:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800270a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800270e:	4689      	mov	r9, r1
 8002710:	4692      	mov	sl, r2
 8002712:	eb1b 0509 	adds.w	r5, fp, r9
 8002716:	eb4c 060a 	adc.w	r6, ip, sl
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4619      	mov	r1, r3
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	f04f 0400 	mov.w	r4, #0
 800272c:	0094      	lsls	r4, r2, #2
 800272e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002732:	008b      	lsls	r3, r1, #2
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	4628      	mov	r0, r5
 800273a:	4631      	mov	r1, r6
 800273c:	f7fd fd48 	bl	80001d0 <__aeabi_uldivmod>
 8002740:	4603      	mov	r3, r0
 8002742:	460c      	mov	r4, r1
 8002744:	461a      	mov	r2, r3
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <UART_SetConfig+0x5c0>)
 8002748:	fba3 1302 	umull	r1, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	2164      	movs	r1, #100	; 0x64
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	3332      	adds	r3, #50	; 0x32
 800275a:	4a29      	ldr	r2, [pc, #164]	; (8002800 <UART_SetConfig+0x5c0>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002766:	4498      	add	r8, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	469b      	mov	fp, r3
 800276c:	f04f 0c00 	mov.w	ip, #0
 8002770:	46d9      	mov	r9, fp
 8002772:	46e2      	mov	sl, ip
 8002774:	eb19 0309 	adds.w	r3, r9, r9
 8002778:	eb4a 040a 	adc.w	r4, sl, sl
 800277c:	4699      	mov	r9, r3
 800277e:	46a2      	mov	sl, r4
 8002780:	eb19 090b 	adds.w	r9, r9, fp
 8002784:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002788:	f04f 0100 	mov.w	r1, #0
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800279c:	4689      	mov	r9, r1
 800279e:	4692      	mov	sl, r2
 80027a0:	eb1b 0509 	adds.w	r5, fp, r9
 80027a4:	eb4c 060a 	adc.w	r6, ip, sl
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	0094      	lsls	r4, r2, #2
 80027bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027c0:	008b      	lsls	r3, r1, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	4623      	mov	r3, r4
 80027c6:	4628      	mov	r0, r5
 80027c8:	4631      	mov	r1, r6
 80027ca:	f7fd fd01 	bl	80001d0 <__aeabi_uldivmod>
 80027ce:	4603      	mov	r3, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <UART_SetConfig+0x5c0>)
 80027d6:	fba3 1302 	umull	r1, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2164      	movs	r1, #100	; 0x64
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	3332      	adds	r3, #50	; 0x32
 80027e8:	4a05      	ldr	r2, [pc, #20]	; (8002800 <UART_SetConfig+0x5c0>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4442      	add	r2, r8
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	e0d7      	b.n	80029ae <UART_SetConfig+0x76e>
 80027fe:	bf00      	nop
 8002800:	51eb851f 	.word	0x51eb851f
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800280c:	f7ff fc20 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8002810:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	469a      	mov	sl, r3
 8002816:	f04f 0b00 	mov.w	fp, #0
 800281a:	46d0      	mov	r8, sl
 800281c:	46d9      	mov	r9, fp
 800281e:	eb18 0308 	adds.w	r3, r8, r8
 8002822:	eb49 0409 	adc.w	r4, r9, r9
 8002826:	4698      	mov	r8, r3
 8002828:	46a1      	mov	r9, r4
 800282a:	eb18 080a 	adds.w	r8, r8, sl
 800282e:	eb49 090b 	adc.w	r9, r9, fp
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800283e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002842:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002846:	4688      	mov	r8, r1
 8002848:	4691      	mov	r9, r2
 800284a:	eb1a 0508 	adds.w	r5, sl, r8
 800284e:	eb4b 0609 	adc.w	r6, fp, r9
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4619      	mov	r1, r3
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	0094      	lsls	r4, r2, #2
 8002866:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800286a:	008b      	lsls	r3, r1, #2
 800286c:	461a      	mov	r2, r3
 800286e:	4623      	mov	r3, r4
 8002870:	4628      	mov	r0, r5
 8002872:	4631      	mov	r1, r6
 8002874:	f7fd fcac 	bl	80001d0 <__aeabi_uldivmod>
 8002878:	4603      	mov	r3, r0
 800287a:	460c      	mov	r4, r1
 800287c:	461a      	mov	r2, r3
 800287e:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <UART_SetConfig+0x778>)
 8002880:	fba3 2302 	umull	r2, r3, r3, r2
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	469b      	mov	fp, r3
 800288e:	f04f 0c00 	mov.w	ip, #0
 8002892:	46d9      	mov	r9, fp
 8002894:	46e2      	mov	sl, ip
 8002896:	eb19 0309 	adds.w	r3, r9, r9
 800289a:	eb4a 040a 	adc.w	r4, sl, sl
 800289e:	4699      	mov	r9, r3
 80028a0:	46a2      	mov	sl, r4
 80028a2:	eb19 090b 	adds.w	r9, r9, fp
 80028a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028be:	4689      	mov	r9, r1
 80028c0:	4692      	mov	sl, r2
 80028c2:	eb1b 0509 	adds.w	r5, fp, r9
 80028c6:	eb4c 060a 	adc.w	r6, ip, sl
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	f04f 0400 	mov.w	r4, #0
 80028dc:	0094      	lsls	r4, r2, #2
 80028de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028e2:	008b      	lsls	r3, r1, #2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4623      	mov	r3, r4
 80028e8:	4628      	mov	r0, r5
 80028ea:	4631      	mov	r1, r6
 80028ec:	f7fd fc70 	bl	80001d0 <__aeabi_uldivmod>
 80028f0:	4603      	mov	r3, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <UART_SetConfig+0x778>)
 80028f8:	fba3 1302 	umull	r1, r3, r3, r2
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	2164      	movs	r1, #100	; 0x64
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	3332      	adds	r3, #50	; 0x32
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <UART_SetConfig+0x778>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002916:	4498      	add	r8, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	469b      	mov	fp, r3
 800291c:	f04f 0c00 	mov.w	ip, #0
 8002920:	46d9      	mov	r9, fp
 8002922:	46e2      	mov	sl, ip
 8002924:	eb19 0309 	adds.w	r3, r9, r9
 8002928:	eb4a 040a 	adc.w	r4, sl, sl
 800292c:	4699      	mov	r9, r3
 800292e:	46a2      	mov	sl, r4
 8002930:	eb19 090b 	adds.w	r9, r9, fp
 8002934:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800294c:	4689      	mov	r9, r1
 800294e:	4692      	mov	sl, r2
 8002950:	eb1b 0509 	adds.w	r5, fp, r9
 8002954:	eb4c 060a 	adc.w	r6, ip, sl
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4619      	mov	r1, r3
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	f04f 0400 	mov.w	r4, #0
 800296a:	0094      	lsls	r4, r2, #2
 800296c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002970:	008b      	lsls	r3, r1, #2
 8002972:	461a      	mov	r2, r3
 8002974:	4623      	mov	r3, r4
 8002976:	4628      	mov	r0, r5
 8002978:	4631      	mov	r1, r6
 800297a:	f7fd fc29 	bl	80001d0 <__aeabi_uldivmod>
 800297e:	4603      	mov	r3, r0
 8002980:	460c      	mov	r4, r1
 8002982:	461a      	mov	r2, r3
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <UART_SetConfig+0x778>)
 8002986:	fba3 1302 	umull	r1, r3, r3, r2
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2164      	movs	r1, #100	; 0x64
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	3332      	adds	r3, #50	; 0x32
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <UART_SetConfig+0x778>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4442      	add	r2, r8
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	e7ff      	b.n	80029ae <UART_SetConfig+0x76e>
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b8:	51eb851f 	.word	0x51eb851f

080029bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d2:	f3ef 8305 	mrs	r3, IPSR
 80029d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029de:	f3ef 8310 	mrs	r3, PRIMASK
 80029e2:	607b      	str	r3, [r7, #4]
  return(result);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029ea:	f3ef 8311 	mrs	r3, BASEPRI
 80029ee:	603b      	str	r3, [r7, #0]
  return(result);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <osKernelInitialize+0x3a>
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <osKernelInitialize+0x64>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d103      	bne.n	8002a06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029fe:	f06f 0305 	mvn.w	r3, #5
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e00c      	b.n	8002a20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <osKernelInitialize+0x64>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <osKernelInitialize+0x64>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e002      	b.n	8002a20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a20:	68fb      	ldr	r3, [r7, #12]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	2000002c 	.word	0x2000002c

08002a34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a3a:	f3ef 8305 	mrs	r3, IPSR
 8002a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a46:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4a:	607b      	str	r3, [r7, #4]
  return(result);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d105      	bne.n	8002a5e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a52:	f3ef 8311 	mrs	r3, BASEPRI
 8002a56:	603b      	str	r3, [r7, #0]
  return(result);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <osKernelStart+0x3a>
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <osKernelStart+0x68>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d103      	bne.n	8002a6e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a66:	f06f 0305 	mvn.w	r3, #5
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e010      	b.n	8002a90 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <osKernelStart+0x68>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d109      	bne.n	8002a8a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a76:	f7ff ffa1 	bl	80029bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <osKernelStart+0x68>)
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a80:	f001 f870 	bl	8003b64 <vTaskStartScheduler>
      stat = osOK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e002      	b.n	8002a90 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a90:	68fb      	ldr	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000002c 	.word	0x2000002c

08002aa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b090      	sub	sp, #64	; 0x40
 8002aa4:	af04      	add	r7, sp, #16
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab0:	f3ef 8305 	mrs	r3, IPSR
 8002ab4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ab6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 808f 	bne.w	8002bdc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002aca:	f3ef 8311 	mrs	r3, BASEPRI
 8002ace:	617b      	str	r3, [r7, #20]
  return(result);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <osThreadNew+0x3e>
 8002ad6:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <osThreadNew+0x148>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d07e      	beq.n	8002bdc <osThreadNew+0x13c>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d07b      	beq.n	8002bdc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002ae8:	2318      	movs	r3, #24
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d045      	beq.n	8002b88 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <osThreadNew+0x6a>
        name = attr->name;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <osThreadNew+0x90>
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	2b38      	cmp	r3, #56	; 0x38
 8002b22:	d805      	bhi.n	8002b30 <osThreadNew+0x90>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <osThreadNew+0x94>
        return (NULL);
 8002b30:	2300      	movs	r3, #0
 8002b32:	e054      	b.n	8002bde <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <osThreadNew+0xca>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b5b      	cmp	r3, #91	; 0x5b
 8002b52:	d90a      	bls.n	8002b6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <osThreadNew+0xca>
        mem = 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	623b      	str	r3, [r7, #32]
 8002b68:	e010      	b.n	8002b8c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <osThreadNew+0xec>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <osThreadNew+0xec>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <osThreadNew+0xec>
          mem = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
 8002b86:	e001      	b.n	8002b8c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d110      	bne.n	8002bb4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b9a:	9202      	str	r2, [sp, #8]
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fe09 	bl	80037c0 <xTaskCreateStatic>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	e013      	b.n	8002bdc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d110      	bne.n	8002bdc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fe51 	bl	8003874 <xTaskCreate>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d001      	beq.n	8002bdc <osThreadNew+0x13c>
          hTask = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002bdc:	693b      	ldr	r3, [r7, #16]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3730      	adds	r7, #48	; 0x30
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000002c 	.word	0x2000002c

08002bec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf4:	f3ef 8305 	mrs	r3, IPSR
 8002bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8002bfa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c00:	f3ef 8310 	mrs	r3, PRIMASK
 8002c04:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8002c10:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <osDelay+0x3c>
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <osDelay+0x58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d103      	bne.n	8002c28 <osDelay+0x3c>
    stat = osErrorISR;
 8002c20:	f06f 0305 	mvn.w	r3, #5
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e007      	b.n	8002c38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 ff62 	bl	8003afc <vTaskDelay>
    }
  }

  return (stat);
 8002c38:	697b      	ldr	r3, [r7, #20]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000002c 	.word	0x2000002c

08002c48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <vApplicationGetIdleTaskMemory+0x30>)
 8002c5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000030 	.word	0x20000030
 8002c78:	2000008c 	.word	0x2000008c

08002c7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4a06      	ldr	r2, [pc, #24]	; (8002cac <vApplicationGetTimerTaskMemory+0x30>)
 8002c92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c9a:	601a      	str	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	2000028c 	.word	0x2000028c
 8002cac:	200002e8 	.word	0x200002e8

08002cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f103 0208 	add.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f103 0208 	add.w	r2, r3, #8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f103 0208 	add.w	r2, r3, #8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d103      	bne.n	8002d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e00c      	b.n	8002d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3308      	adds	r3, #8
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e002      	b.n	8002d80 <vListInsert+0x2e>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d2f6      	bcs.n	8002d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6852      	ldr	r2, [r2, #4]
 8002de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d103      	bne.n	8002df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1e5a      	subs	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	e7fe      	b.n	8002e3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002e40:	f002 f814 	bl	8004e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	441a      	add	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	3b01      	subs	r3, #1
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	22ff      	movs	r2, #255	; 0xff
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d114      	bne.n	8002ec0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01a      	beq.n	8002ed4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f8de 	bl	8004064 <xTaskRemoveFromEventList>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <xQueueGenericReset+0xcc>)
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	e009      	b.n	8002ed4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3310      	adds	r3, #16
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fef3 	bl	8002cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3324      	adds	r3, #36	; 0x24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff feee 	bl	8002cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ed4:	f001 fff8 	bl	8004ec8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ed8:	2301      	movs	r3, #1
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <xQueueGenericCreateStatic+0x28>
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0e:	e7fe      	b.n	8002f0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <xQueueGenericCreateStatic+0x42>
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
 8002f28:	e7fe      	b.n	8002f28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <xQueueGenericCreateStatic+0x4e>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <xQueueGenericCreateStatic+0x52>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <xQueueGenericCreateStatic+0x54>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <xQueueGenericCreateStatic+0x6c>
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	e7fe      	b.n	8002f52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <xQueueGenericCreateStatic+0x78>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <xQueueGenericCreateStatic+0x7c>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <xQueueGenericCreateStatic+0x7e>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <xQueueGenericCreateStatic+0x96>
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	e7fe      	b.n	8002f7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f7e:	2350      	movs	r3, #80	; 0x50
 8002f80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d009      	beq.n	8002f9c <xQueueGenericCreateStatic+0xb4>
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	e7fe      	b.n	8002f9a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f805 	bl	8002fce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3730      	adds	r7, #48	; 0x30
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e002      	b.n	8002ff0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	69b8      	ldr	r0, [r7, #24]
 8003000:	f7ff ff0a 	bl	8002e18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	; 0x38
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003022:	2300      	movs	r3, #0
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <xQueueGenericSend+0x30>
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
 8003042:	e7fe      	b.n	8003042 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <xQueueGenericSend+0x3e>
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <xQueueGenericSend+0x42>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <xQueueGenericSend+0x44>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <xQueueGenericSend+0x5c>
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	e7fe      	b.n	800306e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d103      	bne.n	800307e <xQueueGenericSend+0x6a>
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <xQueueGenericSend+0x6e>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueGenericSend+0x70>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <xQueueGenericSend+0x88>
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	e7fe      	b.n	800309a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800309c:	f001 f998 	bl	80043d0 <xTaskGetSchedulerState>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <xQueueGenericSend+0x98>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <xQueueGenericSend+0x9c>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <xQueueGenericSend+0x9e>
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <xQueueGenericSend+0xb6>
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e7fe      	b.n	80030c8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ca:	f001 fecf 	bl	8004e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <xQueueGenericSend+0xcc>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d129      	bne.n	8003134 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e6:	f000 f9ff 	bl	80034e8 <prvCopyDataToQueue>
 80030ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	3324      	adds	r3, #36	; 0x24
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 ffb3 	bl	8004064 <xTaskRemoveFromEventList>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003104:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <xQueueGenericSend+0x1f0>)
 8003106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	e00a      	b.n	800312c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <xQueueGenericSend+0x1f0>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800312c:	f001 fecc 	bl	8004ec8 <vPortExitCritical>
				return pdPASS;
 8003130:	2301      	movs	r3, #1
 8003132:	e063      	b.n	80031fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800313a:	f001 fec5 	bl	8004ec8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800313e:	2300      	movs	r3, #0
 8003140:	e05c      	b.n	80031fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4618      	mov	r0, r3
 800314e:	f000 ffeb 	bl	8004128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003152:	2301      	movs	r3, #1
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003156:	f001 feb7 	bl	8004ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800315a:	f000 fd67 	bl	8003c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800315e:	f001 fe85 	bl	8004e6c <vPortEnterCritical>
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003168:	b25b      	sxtb	r3, r3
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d103      	bne.n	8003178 <xQueueGenericSend+0x164>
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800317e:	b25b      	sxtb	r3, r3
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d103      	bne.n	800318e <xQueueGenericSend+0x17a>
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800318e:	f001 fe9b 	bl	8004ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003192:	1d3a      	adds	r2, r7, #4
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 ffda 	bl	8004154 <xTaskCheckForTimeOut>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d124      	bne.n	80031f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031a8:	f000 fa96 	bl	80036d8 <prvIsQueueFull>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d018      	beq.n	80031e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	3310      	adds	r3, #16
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 ff04 	bl	8003fc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c2:	f000 fa21 	bl	8003608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031c6:	f000 fd3f 	bl	8003c48 <xTaskResumeAll>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f47f af7c 	bne.w	80030ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <xQueueGenericSend+0x1f0>)
 80031d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	e772      	b.n	80030ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031e6:	f000 fa0f 	bl	8003608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ea:	f000 fd2d 	bl	8003c48 <xTaskResumeAll>
 80031ee:	e76c      	b.n	80030ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f2:	f000 fa09 	bl	8003608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031f6:	f000 fd27 	bl	8003c48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3738      	adds	r7, #56	; 0x38
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08e      	sub	sp, #56	; 0x38
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <xQueueGenericSendFromISR+0x2c>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	e7fe      	b.n	8003232 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <xQueueGenericSendFromISR+0x3a>
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <xQueueGenericSendFromISR+0x3e>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <xQueueGenericSendFromISR+0x40>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <xQueueGenericSendFromISR+0x58>
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	623b      	str	r3, [r7, #32]
 800325e:	e7fe      	b.n	800325e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d103      	bne.n	800326e <xQueueGenericSendFromISR+0x66>
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <xQueueGenericSendFromISR+0x6a>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <xQueueGenericSendFromISR+0x6c>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <xQueueGenericSendFromISR+0x84>
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e7fe      	b.n	800328a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800328c:	f001 feca 	bl	8005024 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003290:	f3ef 8211 	mrs	r2, BASEPRI
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	61ba      	str	r2, [r7, #24]
 80032a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <xQueueGenericSendFromISR+0xb6>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d12c      	bne.n	8003318 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ce:	f000 f90b 	bl	80034e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d112      	bne.n	8003302 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d016      	beq.n	8003312 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 febb 	bl	8004064 <xTaskRemoveFromEventList>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e007      	b.n	8003312 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003306:	3301      	adds	r3, #1
 8003308:	b2db      	uxtb	r3, r3
 800330a:	b25a      	sxtb	r2, r3
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003312:	2301      	movs	r3, #1
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003316:	e001      	b.n	800331c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003318:	2300      	movs	r3, #0
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003328:	4618      	mov	r0, r3
 800332a:	3738      	adds	r7, #56	; 0x38
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800333c:	2300      	movs	r3, #0
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <xQueueReceive+0x2e>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	623b      	str	r3, [r7, #32]
 800335c:	e7fe      	b.n	800335c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <xQueueReceive+0x3c>
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <xQueueReceive+0x40>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <xQueueReceive+0x42>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <xQueueReceive+0x5a>
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e7fe      	b.n	8003388 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800338a:	f001 f821 	bl	80043d0 <xTaskGetSchedulerState>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <xQueueReceive+0x6a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <xQueueReceive+0x6e>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <xQueueReceive+0x70>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <xQueueReceive+0x88>
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	e7fe      	b.n	80033b6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033b8:	f001 fd58 	bl	8004e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01f      	beq.n	8003408 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033cc:	f000 f8f6 	bl	80035bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00f      	beq.n	8003400 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	3310      	adds	r3, #16
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fe3d 	bl	8004064 <xTaskRemoveFromEventList>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033f0:	4b3c      	ldr	r3, [pc, #240]	; (80034e4 <xQueueReceive+0x1b4>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003400:	f001 fd62 	bl	8004ec8 <vPortExitCritical>
				return pdPASS;
 8003404:	2301      	movs	r3, #1
 8003406:	e069      	b.n	80034dc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800340e:	f001 fd5b 	bl	8004ec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003412:	2300      	movs	r3, #0
 8003414:	e062      	b.n	80034dc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d106      	bne.n	800342a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fe81 	bl	8004128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800342a:	f001 fd4d 	bl	8004ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800342e:	f000 fbfd 	bl	8003c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003432:	f001 fd1b 	bl	8004e6c <vPortEnterCritical>
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800343c:	b25b      	sxtb	r3, r3
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d103      	bne.n	800344c <xQueueReceive+0x11c>
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003452:	b25b      	sxtb	r3, r3
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <xQueueReceive+0x132>
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003462:	f001 fd31 	bl	8004ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003466:	1d3a      	adds	r2, r7, #4
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fe70 	bl	8004154 <xTaskCheckForTimeOut>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d123      	bne.n	80034c2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800347a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347c:	f000 f916 	bl	80036ac <prvIsQueueEmpty>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d017      	beq.n	80034b6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	3324      	adds	r3, #36	; 0x24
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fd9a 	bl	8003fc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003496:	f000 f8b7 	bl	8003608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800349a:	f000 fbd5 	bl	8003c48 <xTaskResumeAll>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d189      	bne.n	80033b8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <xQueueReceive+0x1b4>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	e780      	b.n	80033b8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b8:	f000 f8a6 	bl	8003608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034bc:	f000 fbc4 	bl	8003c48 <xTaskResumeAll>
 80034c0:	e77a      	b.n	80033b8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034c4:	f000 f8a0 	bl	8003608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034c8:	f000 fbbe 	bl	8003c48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ce:	f000 f8ed 	bl	80036ac <prvIsQueueEmpty>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f43f af6f 	beq.w	80033b8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3730      	adds	r7, #48	; 0x30
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d14d      	bne.n	80035aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 ff7a 	bl	800440c <xTaskPriorityDisinherit>
 8003518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e043      	b.n	80035aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d119      	bne.n	800355c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6858      	ldr	r0, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	461a      	mov	r2, r3
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	f001 ffae 	bl	8005494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	441a      	add	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d32b      	bcc.n	80035aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	e026      	b.n	80035aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68d8      	ldr	r0, [r3, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	461a      	mov	r2, r3
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	f001 ff94 	bl	8005494 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	425b      	negs	r3, r3
 8003576:	441a      	add	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	425b      	negs	r3, r3
 8003592:	441a      	add	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d105      	bne.n	80035aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035b2:	697b      	ldr	r3, [r7, #20]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	441a      	add	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d303      	bcc.n	80035f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68d9      	ldr	r1, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	461a      	mov	r2, r3
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	f001 ff4a 	bl	8005494 <memcpy>
	}
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003610:	f001 fc2c 	bl	8004e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800361a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800361c:	e011      	b.n	8003642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3324      	adds	r3, #36	; 0x24
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fd1a 	bl	8004064 <xTaskRemoveFromEventList>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003636:	f000 fded 	bl	8004214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3b01      	subs	r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	dce9      	bgt.n	800361e <prvUnlockQueue+0x16>
 800364a:	e000      	b.n	800364e <prvUnlockQueue+0x46>
					break;
 800364c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	22ff      	movs	r2, #255	; 0xff
 8003652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003656:	f001 fc37 	bl	8004ec8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800365a:	f001 fc07 	bl	8004e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003666:	e011      	b.n	800368c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3310      	adds	r3, #16
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fcf5 	bl	8004064 <xTaskRemoveFromEventList>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003680:	f000 fdc8 	bl	8004214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	3b01      	subs	r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800368c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003690:	2b00      	cmp	r3, #0
 8003692:	dce9      	bgt.n	8003668 <prvUnlockQueue+0x60>
 8003694:	e000      	b.n	8003698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	22ff      	movs	r2, #255	; 0xff
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036a0:	f001 fc12 	bl	8004ec8 <vPortExitCritical>
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036b4:	f001 fbda 	bl	8004e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e001      	b.n	80036ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036ca:	f001 fbfd 	bl	8004ec8 <vPortExitCritical>

	return xReturn;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036e0:	f001 fbc4 	bl	8004e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d102      	bne.n	80036f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e001      	b.n	80036fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036fa:	f001 fbe5 	bl	8004ec8 <vPortExitCritical>

	return xReturn;
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e014      	b.n	8003742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003718:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <vQueueAddToRegistry+0x4c>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003724:	490b      	ldr	r1, [pc, #44]	; (8003754 <vQueueAddToRegistry+0x4c>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <vQueueAddToRegistry+0x4c>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800373a:	e005      	b.n	8003748 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b07      	cmp	r3, #7
 8003746:	d9e7      	bls.n	8003718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	20004980 	.word	0x20004980

08003758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003768:	f001 fb80 	bl	8004e6c <vPortEnterCritical>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003772:	b25b      	sxtb	r3, r3
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d103      	bne.n	8003782 <vQueueWaitForMessageRestricted+0x2a>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003788:	b25b      	sxtb	r3, r3
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d103      	bne.n	8003798 <vQueueWaitForMessageRestricted+0x40>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003798:	f001 fb96 	bl	8004ec8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3324      	adds	r3, #36	; 0x24
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fc2f 	bl	8004010 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7ff ff28 	bl	8003608 <prvUnlockQueue>
	}
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af04      	add	r7, sp, #16
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <xTaskCreateStatic+0x28>
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	e7fe      	b.n	80037e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <xTaskCreateStatic+0x42>
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	e7fe      	b.n	8003800 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003802:	235c      	movs	r3, #92	; 0x5c
 8003804:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b5c      	cmp	r3, #92	; 0x5c
 800380a:	d009      	beq.n	8003820 <xTaskCreateStatic+0x60>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	e7fe      	b.n	800381e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003820:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01e      	beq.n	8003866 <xTaskCreateStatic+0xa6>
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01b      	beq.n	8003866 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003836:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003840:	2300      	movs	r3, #0
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f850 	bl	80038fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800385e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003860:	f000 f8dc 	bl	8003a1c <prvAddNewTaskToReadyList>
 8003864:	e001      	b.n	800386a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800386a:	697b      	ldr	r3, [r7, #20]
	}
 800386c:	4618      	mov	r0, r3
 800386e:	3728      	adds	r7, #40	; 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af04      	add	r7, sp, #16
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fc09 	bl	80050a0 <pvPortMalloc>
 800388e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003896:	205c      	movs	r0, #92	; 0x5c
 8003898:	f001 fc02 	bl	80050a0 <pvPortMalloc>
 800389c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
 80038aa:	e005      	b.n	80038b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038ac:	6978      	ldr	r0, [r7, #20]
 80038ae:	f001 fcb9 	bl	8005224 <vPortFree>
 80038b2:	e001      	b.n	80038b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f80e 	bl	80038fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038e2:	69f8      	ldr	r0, [r7, #28]
 80038e4:	f000 f89a 	bl	8003a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038e8:	2301      	movs	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e002      	b.n	80038f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038f4:	69bb      	ldr	r3, [r7, #24]
	}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	461a      	mov	r2, r3
 8003916:	21a5      	movs	r1, #165	; 0xa5
 8003918:	f001 fdc7 	bl	80054aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003926:	3b01      	subs	r3, #1
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f023 0307 	bic.w	r3, r3, #7
 8003934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <prvInitialiseNewTask+0x56>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e7fe      	b.n	8003952 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01f      	beq.n	800399a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	e012      	b.n	8003986 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	7819      	ldrb	r1, [r3, #0]
 8003968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	3334      	adds	r3, #52	; 0x34
 8003970:	460a      	mov	r2, r1
 8003972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	3301      	adds	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2b0f      	cmp	r3, #15
 800398a:	d9e9      	bls.n	8003960 <prvInitialiseNewTask+0x62>
 800398c:	e000      	b.n	8003990 <prvInitialiseNewTask+0x92>
			{
				break;
 800398e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003998:	e003      	b.n	80039a2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	2b37      	cmp	r3, #55	; 0x37
 80039a6:	d901      	bls.n	80039ac <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039a8:	2337      	movs	r3, #55	; 0x37
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	2200      	movs	r2, #0
 80039bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	3304      	adds	r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f994 	bl	8002cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	3318      	adds	r3, #24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f98f 	bl	8002cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	2200      	movs	r2, #0
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	68f9      	ldr	r1, [r7, #12]
 80039fa:	69b8      	ldr	r0, [r7, #24]
 80039fc:	f001 f90c 	bl	8004c18 <pxPortInitialiseStack>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a12:	bf00      	nop
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a24:	f001 fa22 	bl	8004e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <prvAddNewTaskToReadyList+0xc4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <prvAddNewTaskToReadyList+0xc4>)
 8003a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a32:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <prvAddNewTaskToReadyList+0xc4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d110      	bne.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a48:	f000 fc08 	bl	800425c <prvInitialiseTaskLists>
 8003a4c:	e00d      	b.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a4e:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <prvAddNewTaskToReadyList+0xcc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d802      	bhi.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <prvAddNewTaskToReadyList+0xd0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <prvAddNewTaskToReadyList+0xd0>)
 8003a72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <prvAddNewTaskToReadyList+0xd0>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <prvAddNewTaskToReadyList+0xd4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d903      	bls.n	8003a90 <prvAddNewTaskToReadyList+0x74>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <prvAddNewTaskToReadyList+0xd4>)
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <prvAddNewTaskToReadyList+0xd8>)
 8003a9e:	441a      	add	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7ff f92f 	bl	8002d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003aac:	f001 fa0c 	bl	8004ec8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <prvAddNewTaskToReadyList+0xcc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d207      	bcs.n	8003ad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <prvAddNewTaskToReadyList+0xdc>)
 8003ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000bbc 	.word	0x20000bbc
 8003ae4:	200006e8 	.word	0x200006e8
 8003ae8:	20000bc8 	.word	0x20000bc8
 8003aec:	20000bd8 	.word	0x20000bd8
 8003af0:	20000bc4 	.word	0x20000bc4
 8003af4:	200006ec 	.word	0x200006ec
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <vTaskDelay+0x60>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <vTaskDelay+0x2e>
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	e7fe      	b.n	8003b28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003b2a:	f000 f87f 	bl	8003c2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b2e:	2100      	movs	r1, #0
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fcd7 	bl	80044e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b36:	f000 f887 	bl	8003c48 <xTaskResumeAll>
 8003b3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <vTaskDelay+0x64>)
 8003b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000be4 	.word	0x20000be4
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b72:	463a      	mov	r2, r7
 8003b74:	1d39      	adds	r1, r7, #4
 8003b76:	f107 0308 	add.w	r3, r7, #8
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff f864 	bl	8002c48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b80:	6839      	ldr	r1, [r7, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	9202      	str	r2, [sp, #8]
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	460a      	mov	r2, r1
 8003b92:	4920      	ldr	r1, [pc, #128]	; (8003c14 <vTaskStartScheduler+0xb0>)
 8003b94:	4820      	ldr	r0, [pc, #128]	; (8003c18 <vTaskStartScheduler+0xb4>)
 8003b96:	f7ff fe13 	bl	80037c0 <xTaskCreateStatic>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <vTaskStartScheduler+0xb8>)
 8003b9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <vTaskStartScheduler+0xb8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e001      	b.n	8003bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d102      	bne.n	8003bbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bb8:	f000 fce8 	bl	800458c <xTimerCreateTimerTask>
 8003bbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d115      	bne.n	8003bf0 <vTaskStartScheduler+0x8c>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <vTaskStartScheduler+0xbc>)
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <vTaskStartScheduler+0xc0>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <vTaskStartScheduler+0xc4>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bea:	f001 f8a1 	bl	8004d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bee:	e00d      	b.n	8003c0c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d109      	bne.n	8003c0c <vTaskStartScheduler+0xa8>
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e7fe      	b.n	8003c0a <vTaskStartScheduler+0xa6>
}
 8003c0c:	bf00      	nop
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	080055d4 	.word	0x080055d4
 8003c18:	0800422d 	.word	0x0800422d
 8003c1c:	20000be0 	.word	0x20000be0
 8003c20:	20000bdc 	.word	0x20000bdc
 8003c24:	20000bc8 	.word	0x20000bc8
 8003c28:	20000bc0 	.word	0x20000bc0

08003c2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <vTaskSuspendAll+0x18>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a03      	ldr	r2, [pc, #12]	; (8003c44 <vTaskSuspendAll+0x18>)
 8003c38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c3a:	bf00      	nop
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	20000be4 	.word	0x20000be4

08003c48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <xTaskResumeAll+0x114>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <xTaskResumeAll+0x2a>
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	e7fe      	b.n	8003c70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c72:	f001 f8fb 	bl	8004e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <xTaskResumeAll+0x114>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	4a37      	ldr	r2, [pc, #220]	; (8003d5c <xTaskResumeAll+0x114>)
 8003c7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c80:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <xTaskResumeAll+0x114>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d162      	bne.n	8003d4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c88:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <xTaskResumeAll+0x118>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05e      	beq.n	8003d4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c90:	e02f      	b.n	8003cf2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <xTaskResumeAll+0x11c>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3318      	adds	r3, #24
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff f890 	bl	8002dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f88b 	bl	8002dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <xTaskResumeAll+0x120>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d903      	bls.n	8003cc2 <xTaskResumeAll+0x7a>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <xTaskResumeAll+0x120>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <xTaskResumeAll+0x124>)
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7ff f816 	bl	8002d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <xTaskResumeAll+0x128>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <xTaskResumeAll+0x12c>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <xTaskResumeAll+0x11c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1cb      	bne.n	8003c92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d00:	f000 fb46 	bl	8004390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d04:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <xTaskResumeAll+0x130>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d10:	f000 f846 	bl	8003da0 <xTaskIncrementTick>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <xTaskResumeAll+0x12c>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f1      	bne.n	8003d10 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003d2c:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <xTaskResumeAll+0x130>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <xTaskResumeAll+0x12c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <xTaskResumeAll+0x134>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 f8bb 	bl	8004ec8 <vPortExitCritical>

	return xAlreadyYielded;
 8003d52:	68bb      	ldr	r3, [r7, #8]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000be4 	.word	0x20000be4
 8003d60:	20000bbc 	.word	0x20000bbc
 8003d64:	20000b7c 	.word	0x20000b7c
 8003d68:	20000bc4 	.word	0x20000bc4
 8003d6c:	200006ec 	.word	0x200006ec
 8003d70:	200006e8 	.word	0x200006e8
 8003d74:	20000bd0 	.word	0x20000bd0
 8003d78:	20000bcc 	.word	0x20000bcc
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <xTaskGetTickCount+0x1c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d8c:	687b      	ldr	r3, [r7, #4]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000bc0 	.word	0x20000bc0

08003da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003daa:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <xTaskIncrementTick+0x144>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 8088 	bne.w	8003ec4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003db4:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <xTaskIncrementTick+0x148>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ee8 <xTaskIncrementTick+0x148>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11f      	bne.n	8003e08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dc8:	4b48      	ldr	r3, [pc, #288]	; (8003eec <xTaskIncrementTick+0x14c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <xTaskIncrementTick+0x46>
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	e7fe      	b.n	8003de4 <xTaskIncrementTick+0x44>
 8003de6:	4b41      	ldr	r3, [pc, #260]	; (8003eec <xTaskIncrementTick+0x14c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <xTaskIncrementTick+0x150>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3e      	ldr	r2, [pc, #248]	; (8003eec <xTaskIncrementTick+0x14c>)
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4a3e      	ldr	r2, [pc, #248]	; (8003ef0 <xTaskIncrementTick+0x150>)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <xTaskIncrementTick+0x154>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <xTaskIncrementTick+0x154>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	f000 fac4 	bl	8004390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d349      	bcc.n	8003ea6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <xTaskIncrementTick+0x14c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e22:	601a      	str	r2, [r3, #0]
					break;
 8003e24:	e03f      	b.n	8003ea6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e26:	4b31      	ldr	r3, [pc, #196]	; (8003eec <xTaskIncrementTick+0x14c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d203      	bcs.n	8003e46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e44:	e02f      	b.n	8003ea6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe ffba 	bl	8002dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe ffb1 	bl	8002dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4b25      	ldr	r3, [pc, #148]	; (8003efc <xTaskIncrementTick+0x15c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d903      	bls.n	8003e76 <xTaskIncrementTick+0xd6>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	4a22      	ldr	r2, [pc, #136]	; (8003efc <xTaskIncrementTick+0x15c>)
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <xTaskIncrementTick+0x160>)
 8003e84:	441a      	add	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f7fe ff3c 	bl	8002d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <xTaskIncrementTick+0x164>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d3b8      	bcc.n	8003e12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea4:	e7b5      	b.n	8003e12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ea6:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <xTaskIncrementTick+0x164>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4914      	ldr	r1, [pc, #80]	; (8003f00 <xTaskIncrementTick+0x160>)
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d907      	bls.n	8003ece <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e004      	b.n	8003ece <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <xTaskIncrementTick+0x168>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <xTaskIncrementTick+0x168>)
 8003ecc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <xTaskIncrementTick+0x16c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003eda:	697b      	ldr	r3, [r7, #20]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000be4 	.word	0x20000be4
 8003ee8:	20000bc0 	.word	0x20000bc0
 8003eec:	20000b74 	.word	0x20000b74
 8003ef0:	20000b78 	.word	0x20000b78
 8003ef4:	20000bd4 	.word	0x20000bd4
 8003ef8:	20000bdc 	.word	0x20000bdc
 8003efc:	20000bc4 	.word	0x20000bc4
 8003f00:	200006ec 	.word	0x200006ec
 8003f04:	200006e8 	.word	0x200006e8
 8003f08:	20000bcc 	.word	0x20000bcc
 8003f0c:	20000bd0 	.word	0x20000bd0

08003f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f16:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <vTaskSwitchContext+0xa4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <vTaskSwitchContext+0xa8>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f24:	e040      	b.n	8003fa8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <vTaskSwitchContext+0xa8>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <vTaskSwitchContext+0xac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e00f      	b.n	8003f54 <vTaskSwitchContext+0x44>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <vTaskSwitchContext+0x3e>
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	e7fe      	b.n	8003f4c <vTaskSwitchContext+0x3c>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	491a      	ldr	r1, [pc, #104]	; (8003fc0 <vTaskSwitchContext+0xb0>)
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0e5      	beq.n	8003f34 <vTaskSwitchContext+0x24>
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <vTaskSwitchContext+0xb0>)
 8003f74:	4413      	add	r3, r2
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d104      	bne.n	8003f98 <vTaskSwitchContext+0x88>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <vTaskSwitchContext+0xb4>)
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4a06      	ldr	r2, [pc, #24]	; (8003fbc <vTaskSwitchContext+0xac>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20000be4 	.word	0x20000be4
 8003fb8:	20000bd0 	.word	0x20000bd0
 8003fbc:	20000bc4 	.word	0x20000bc4
 8003fc0:	200006ec 	.word	0x200006ec
 8003fc4:	200006e8 	.word	0x200006e8

08003fc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <vTaskPlaceOnEventList+0x24>
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	e7fe      	b.n	8003fea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <vTaskPlaceOnEventList+0x44>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fe feac 	bl	8002d52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	6838      	ldr	r0, [r7, #0]
 8003ffe:	f000 fa71 	bl	80044e4 <prvAddCurrentTaskToDelayedList>
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200006e8 	.word	0x200006e8

08004010 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <vTaskPlaceOnEventListRestricted+0x26>
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e7fe      	b.n	8004034 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <vTaskPlaceOnEventListRestricted+0x50>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3318      	adds	r3, #24
 800403c:	4619      	mov	r1, r3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7fe fe63 	bl	8002d0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f000 fa46 	bl	80044e4 <prvAddCurrentTaskToDelayedList>
	}
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200006e8 	.word	0x200006e8

08004064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <xTaskRemoveFromEventList+0x2a>
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e7fe      	b.n	800408c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3318      	adds	r3, #24
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fe96 	bl	8002dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <xTaskRemoveFromEventList+0xac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d11d      	bne.n	80040dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fe8d 	bl	8002dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	4b19      	ldr	r3, [pc, #100]	; (8004114 <xTaskRemoveFromEventList+0xb0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d903      	bls.n	80040be <xTaskRemoveFromEventList+0x5a>
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	4a16      	ldr	r2, [pc, #88]	; (8004114 <xTaskRemoveFromEventList+0xb0>)
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4a13      	ldr	r2, [pc, #76]	; (8004118 <xTaskRemoveFromEventList+0xb4>)
 80040cc:	441a      	add	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f7fe fe18 	bl	8002d0a <vListInsertEnd>
 80040da:	e005      	b.n	80040e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	3318      	adds	r3, #24
 80040e0:	4619      	mov	r1, r3
 80040e2:	480e      	ldr	r0, [pc, #56]	; (800411c <xTaskRemoveFromEventList+0xb8>)
 80040e4:	f7fe fe11 	bl	8002d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <xTaskRemoveFromEventList+0xbc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d905      	bls.n	8004102 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040f6:	2301      	movs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <xTaskRemoveFromEventList+0xc0>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e001      	b.n	8004106 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004106:	697b      	ldr	r3, [r7, #20]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000be4 	.word	0x20000be4
 8004114:	20000bc4 	.word	0x20000bc4
 8004118:	200006ec 	.word	0x200006ec
 800411c:	20000b7c 	.word	0x20000b7c
 8004120:	200006e8 	.word	0x200006e8
 8004124:	20000bd0 	.word	0x20000bd0

08004128 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <vTaskInternalSetTimeOutState+0x24>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <vTaskInternalSetTimeOutState+0x28>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	605a      	str	r2, [r3, #4]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	20000bd4 	.word	0x20000bd4
 8004150:	20000bc0 	.word	0x20000bc0

08004154 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <xTaskCheckForTimeOut+0x24>
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e7fe      	b.n	8004176 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <xTaskCheckForTimeOut+0x3e>
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e7fe      	b.n	8004190 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004192:	f000 fe6b 	bl	8004e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <xTaskCheckForTimeOut+0xb8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d102      	bne.n	80041b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e023      	b.n	80041fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <xTaskCheckForTimeOut+0xbc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d007      	beq.n	80041d2 <xTaskCheckForTimeOut+0x7e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e015      	b.n	80041fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d20b      	bcs.n	80041f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad2      	subs	r2, r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff9d 	bl	8004128 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e004      	b.n	80041fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041fe:	f000 fe63 	bl	8004ec8 <vPortExitCritical>

	return xReturn;
 8004202:	69fb      	ldr	r3, [r7, #28]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000bc0 	.word	0x20000bc0
 8004210:	20000bd4 	.word	0x20000bd4

08004214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <vTaskMissedYield+0x14>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20000bd0 	.word	0x20000bd0

0800422c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004234:	f000 f852 	bl	80042dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <prvIdleTask+0x28>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d9f9      	bls.n	8004234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <prvIdleTask+0x2c>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004250:	e7f0      	b.n	8004234 <prvIdleTask+0x8>
 8004252:	bf00      	nop
 8004254:	200006ec 	.word	0x200006ec
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	e00c      	b.n	8004282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4a12      	ldr	r2, [pc, #72]	; (80042bc <prvInitialiseTaskLists+0x60>)
 8004274:	4413      	add	r3, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fd1a 	bl	8002cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3301      	adds	r3, #1
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b37      	cmp	r3, #55	; 0x37
 8004286:	d9ef      	bls.n	8004268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004288:	480d      	ldr	r0, [pc, #52]	; (80042c0 <prvInitialiseTaskLists+0x64>)
 800428a:	f7fe fd11 	bl	8002cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800428e:	480d      	ldr	r0, [pc, #52]	; (80042c4 <prvInitialiseTaskLists+0x68>)
 8004290:	f7fe fd0e 	bl	8002cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004294:	480c      	ldr	r0, [pc, #48]	; (80042c8 <prvInitialiseTaskLists+0x6c>)
 8004296:	f7fe fd0b 	bl	8002cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800429a:	480c      	ldr	r0, [pc, #48]	; (80042cc <prvInitialiseTaskLists+0x70>)
 800429c:	f7fe fd08 	bl	8002cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042a0:	480b      	ldr	r0, [pc, #44]	; (80042d0 <prvInitialiseTaskLists+0x74>)
 80042a2:	f7fe fd05 	bl	8002cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <prvInitialiseTaskLists+0x78>)
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <prvInitialiseTaskLists+0x64>)
 80042aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvInitialiseTaskLists+0x7c>)
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <prvInitialiseTaskLists+0x68>)
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200006ec 	.word	0x200006ec
 80042c0:	20000b4c 	.word	0x20000b4c
 80042c4:	20000b60 	.word	0x20000b60
 80042c8:	20000b7c 	.word	0x20000b7c
 80042cc:	20000b90 	.word	0x20000b90
 80042d0:	20000ba8 	.word	0x20000ba8
 80042d4:	20000b74 	.word	0x20000b74
 80042d8:	20000b78 	.word	0x20000b78

080042dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e2:	e019      	b.n	8004318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042e4:	f000 fdc2 	bl	8004e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <prvCheckTasksWaitingTermination+0x4c>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe fd65 	bl	8002dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <prvCheckTasksWaitingTermination+0x50>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <prvCheckTasksWaitingTermination+0x50>)
 8004302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <prvCheckTasksWaitingTermination+0x54>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3b01      	subs	r3, #1
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <prvCheckTasksWaitingTermination+0x54>)
 800430c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800430e:	f000 fddb 	bl	8004ec8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f80e 	bl	8004334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <prvCheckTasksWaitingTermination+0x54>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e1      	bne.n	80042e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000b90 	.word	0x20000b90
 800432c:	20000bbc 	.word	0x20000bbc
 8004330:	20000ba4 	.word	0x20000ba4

08004334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	4618      	mov	r0, r3
 800434c:	f000 ff6a 	bl	8005224 <vPortFree>
				vPortFree( pxTCB );
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 ff67 	bl	8005224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004356:	e017      	b.n	8004388 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800435e:	2b01      	cmp	r3, #1
 8004360:	d103      	bne.n	800436a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 ff5e 	bl	8005224 <vPortFree>
	}
 8004368:	e00e      	b.n	8004388 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004370:	2b02      	cmp	r3, #2
 8004372:	d009      	beq.n	8004388 <prvDeleteTCB+0x54>
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e7fe      	b.n	8004386 <prvDeleteTCB+0x52>
	}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvResetNextTaskUnblockTime+0x38>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvResetNextTaskUnblockTime+0x3c>)
 80043a2:	f04f 32ff 	mov.w	r2, #4294967295
 80043a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043a8:	e008      	b.n	80043bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <prvResetNextTaskUnblockTime+0x38>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <prvResetNextTaskUnblockTime+0x3c>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000b74 	.word	0x20000b74
 80043cc:	20000bdc 	.word	0x20000bdc

080043d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <xTaskGetSchedulerState+0x34>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043de:	2301      	movs	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	e008      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <xTaskGetSchedulerState+0x38>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043ec:	2302      	movs	r3, #2
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e001      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043f6:	687b      	ldr	r3, [r7, #4]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	20000bc8 	.word	0x20000bc8
 8004408:	20000be4 	.word	0x20000be4

0800440c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d054      	beq.n	80044cc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004422:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <xTaskPriorityDisinherit+0xcc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d009      	beq.n	8004440 <xTaskPriorityDisinherit+0x34>
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e7fe      	b.n	800443e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <xTaskPriorityDisinherit+0x50>
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	e7fe      	b.n	800445a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	1e5a      	subs	r2, r3, #1
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	429a      	cmp	r2, r3
 8004470:	d02c      	beq.n	80044cc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d128      	bne.n	80044cc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3304      	adds	r3, #4
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe fca0 	bl	8002dc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <xTaskPriorityDisinherit+0xd0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d903      	bls.n	80044ac <xTaskPriorityDisinherit+0xa0>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <xTaskPriorityDisinherit+0xd0>)
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <xTaskPriorityDisinherit+0xd4>)
 80044ba:	441a      	add	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f7fe fc21 	bl	8002d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044cc:	697b      	ldr	r3, [r7, #20]
	}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200006e8 	.word	0x200006e8
 80044dc:	20000bc4 	.word	0x20000bc4
 80044e0:	200006ec 	.word	0x200006ec

080044e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044ee:	4b21      	ldr	r3, [pc, #132]	; (8004574 <prvAddCurrentTaskToDelayedList+0x90>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f4:	4b20      	ldr	r3, [pc, #128]	; (8004578 <prvAddCurrentTaskToDelayedList+0x94>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fc62 	bl	8002dc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d10a      	bne.n	800451e <prvAddCurrentTaskToDelayedList+0x3a>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800450e:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <prvAddCurrentTaskToDelayedList+0x94>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4819      	ldr	r0, [pc, #100]	; (800457c <prvAddCurrentTaskToDelayedList+0x98>)
 8004518:	f7fe fbf7 	bl	8002d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800451c:	e026      	b.n	800456c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <prvAddCurrentTaskToDelayedList+0x94>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	429a      	cmp	r2, r3
 8004534:	d209      	bcs.n	800454a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <prvAddCurrentTaskToDelayedList+0x94>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7fe fc05 	bl	8002d52 <vListInsert>
}
 8004548:	e010      	b.n	800456c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <prvAddCurrentTaskToDelayedList+0xa0>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <prvAddCurrentTaskToDelayedList+0x94>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f7fe fbfb 	bl	8002d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <prvAddCurrentTaskToDelayedList+0xa4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	d202      	bcs.n	800456c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6013      	str	r3, [r2, #0]
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000bc0 	.word	0x20000bc0
 8004578:	200006e8 	.word	0x200006e8
 800457c:	20000ba8 	.word	0x20000ba8
 8004580:	20000b78 	.word	0x20000b78
 8004584:	20000b74 	.word	0x20000b74
 8004588:	20000bdc 	.word	0x20000bdc

0800458c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004596:	f000 faff 	bl	8004b98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800459a:	4b1c      	ldr	r3, [pc, #112]	; (800460c <xTimerCreateTimerTask+0x80>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d021      	beq.n	80045e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045aa:	1d3a      	adds	r2, r7, #4
 80045ac:	f107 0108 	add.w	r1, r7, #8
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe fb61 	bl	8002c7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	9202      	str	r2, [sp, #8]
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	2302      	movs	r3, #2
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	460a      	mov	r2, r1
 80045cc:	4910      	ldr	r1, [pc, #64]	; (8004610 <xTimerCreateTimerTask+0x84>)
 80045ce:	4811      	ldr	r0, [pc, #68]	; (8004614 <xTimerCreateTimerTask+0x88>)
 80045d0:	f7ff f8f6 	bl	80037c0 <xTaskCreateStatic>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <xTimerCreateTimerTask+0x8c>)
 80045d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <xTimerCreateTimerTask+0x8c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045e2:	2301      	movs	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <xTimerCreateTimerTask+0x74>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e7fe      	b.n	80045fe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004600:	697b      	ldr	r3, [r7, #20]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000c18 	.word	0x20000c18
 8004610:	080055dc 	.word	0x080055dc
 8004614:	0800474d 	.word	0x0800474d
 8004618:	20000c1c 	.word	0x20000c1c

0800461c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	; 0x28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <xTimerGenericCommand+0x2c>
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	e7fe      	b.n	8004646 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <xTimerGenericCommand+0x94>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02a      	beq.n	80046a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b05      	cmp	r3, #5
 8004660:	dc18      	bgt.n	8004694 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004662:	f7ff feb5 	bl	80043d0 <xTaskGetSchedulerState>
 8004666:	4603      	mov	r3, r0
 8004668:	2b02      	cmp	r3, #2
 800466a:	d109      	bne.n	8004680 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <xTimerGenericCommand+0x94>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	f107 0110 	add.w	r1, r7, #16
 8004674:	2300      	movs	r3, #0
 8004676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004678:	f7fe fccc 	bl	8003014 <xQueueGenericSend>
 800467c:	6278      	str	r0, [r7, #36]	; 0x24
 800467e:	e012      	b.n	80046a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <xTimerGenericCommand+0x94>)
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	f107 0110 	add.w	r1, r7, #16
 8004688:	2300      	movs	r3, #0
 800468a:	2200      	movs	r2, #0
 800468c:	f7fe fcc2 	bl	8003014 <xQueueGenericSend>
 8004690:	6278      	str	r0, [r7, #36]	; 0x24
 8004692:	e008      	b.n	80046a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <xTimerGenericCommand+0x94>)
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	f107 0110 	add.w	r1, r7, #16
 800469c:	2300      	movs	r3, #0
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	f7fe fdb2 	bl	8003208 <xQueueGenericSendFromISR>
 80046a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000c18 	.word	0x20000c18

080046b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <prvProcessExpiredTimer+0x94>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe fb79 	bl	8002dc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d021      	beq.n	8004724 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	18d1      	adds	r1, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	f000 f8d1 	bl	8004894 <prvInsertTimerInActiveList>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01e      	beq.n	8004736 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046f8:	2300      	movs	r3, #0
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2300      	movs	r3, #0
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	2100      	movs	r1, #0
 8004702:	6978      	ldr	r0, [r7, #20]
 8004704:	f7ff ff8a 	bl	800461c <xTimerGenericCommand>
 8004708:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d112      	bne.n	8004736 <prvProcessExpiredTimer+0x82>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	e7fe      	b.n	8004722 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	4798      	blx	r3
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000c10 	.word	0x20000c10

0800474c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f857 	bl	800480c <prvGetNextExpireTime>
 800475e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4619      	mov	r1, r3
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f803 	bl	8004770 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800476a:	f000 f8d5 	bl	8004918 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800476e:	e7f1      	b.n	8004754 <prvTimerTask+0x8>

08004770 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800477a:	f7ff fa57 	bl	8003c2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f866 	bl	8004854 <prvSampleTimeNow>
 8004788:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d130      	bne.n	80047f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <prvProcessTimerOrBlockTask+0x3c>
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	429a      	cmp	r2, r3
 800479c:	d806      	bhi.n	80047ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800479e:	f7ff fa53 	bl	8003c48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff85 	bl	80046b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047aa:	e024      	b.n	80047f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <prvProcessTimerOrBlockTask+0x90>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <prvProcessTimerOrBlockTask+0x50>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <prvProcessTimerOrBlockTask+0x52>
 80047c0:	2300      	movs	r3, #0
 80047c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <prvProcessTimerOrBlockTask+0x94>)
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	4619      	mov	r1, r3
 80047d2:	f7fe ffc1 	bl	8003758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047d6:	f7ff fa37 	bl	8003c48 <xTaskResumeAll>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <prvProcessTimerOrBlockTask+0x98>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
}
 80047f0:	e001      	b.n	80047f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047f2:	f7ff fa29 	bl	8003c48 <xTaskResumeAll>
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000c14 	.word	0x20000c14
 8004804:	20000c18 	.word	0x20000c18
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <prvGetNextExpireTime+0x44>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <prvGetNextExpireTime+0x16>
 800481e:	2201      	movs	r2, #1
 8004820:	e000      	b.n	8004824 <prvGetNextExpireTime+0x18>
 8004822:	2200      	movs	r2, #0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d105      	bne.n	800483c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <prvGetNextExpireTime+0x44>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e001      	b.n	8004840 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004840:	68fb      	ldr	r3, [r7, #12]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000c10 	.word	0x20000c10

08004854 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800485c:	f7ff fa90 	bl	8003d80 <xTaskGetTickCount>
 8004860:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <prvSampleTimeNow+0x3c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d205      	bcs.n	8004878 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800486c:	f000 f930 	bl	8004ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e002      	b.n	800487e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <prvSampleTimeNow+0x3c>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004884:	68fb      	ldr	r3, [r7, #12]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000c20 	.word	0x20000c20

08004894 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d812      	bhi.n	80048e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e01b      	b.n	8004906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <prvInsertTimerInActiveList+0x7c>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f7fe fa3a 	bl	8002d52 <vListInsert>
 80048de:	e012      	b.n	8004906 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d206      	bcs.n	80048f6 <prvInsertTimerInActiveList+0x62>
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e007      	b.n	8004906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <prvInsertTimerInActiveList+0x80>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7fe fa26 	bl	8002d52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004906:	697b      	ldr	r3, [r7, #20]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000c14 	.word	0x20000c14
 8004914:	20000c10 	.word	0x20000c10

08004918 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08e      	sub	sp, #56	; 0x38
 800491c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800491e:	e0c6      	b.n	8004aae <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	da17      	bge.n	8004956 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	3304      	adds	r3, #4
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <prvProcessReceivedCommands+0x2e>
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e7fe      	b.n	8004944 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494c:	6850      	ldr	r0, [r2, #4]
 800494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004950:	6892      	ldr	r2, [r2, #8]
 8004952:	4611      	mov	r1, r2
 8004954:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f2c0 80a7 	blt.w	8004aac <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	3304      	adds	r3, #4
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fa28 	bl	8002dc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004974:	463b      	mov	r3, r7
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff6c 	bl	8004854 <prvSampleTimeNow>
 800497c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b09      	cmp	r3, #9
 8004982:	f200 8094 	bhi.w	8004aae <prvProcessReceivedCommands+0x196>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <prvProcessReceivedCommands+0x74>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049b5 	.word	0x080049b5
 8004994:	080049b5 	.word	0x080049b5
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a3b 	.word	0x08004a3b
 80049a0:	08004a83 	.word	0x08004a83
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049b5 	.word	0x080049b5
 80049ac:	08004a27 	.word	0x08004a27
 80049b0:	08004a3b 	.word	0x08004a3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	18d1      	adds	r1, r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d4:	f7ff ff5e 	bl	8004894 <prvInsertTimerInActiveList>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d067      	beq.n	8004aae <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d05c      	beq.n	8004aae <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	441a      	add	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	2100      	movs	r1, #0
 8004a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a06:	f7ff fe09 	bl	800461c <xTimerGenericCommand>
 8004a0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d14d      	bne.n	8004aae <prvProcessReceivedCommands+0x196>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e7fe      	b.n	8004a24 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a38:	e039      	b.n	8004aae <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <prvProcessReceivedCommands+0x156>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e7fe      	b.n	8004a6c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	18d1      	adds	r1, r2, r3
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7c:	f7ff ff0a 	bl	8004894 <prvInsertTimerInActiveList>
					break;
 8004a80:	e015      	b.n	8004aae <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a92:	f000 fbc7 	bl	8005224 <vPortFree>
 8004a96:	e00a      	b.n	8004aae <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004aaa:	e000      	b.n	8004aae <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004aac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <prvProcessReceivedCommands+0x1b4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1d39      	adds	r1, r7, #4
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe fc3a 	bl	8003330 <xQueueReceive>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f47f af2e 	bne.w	8004920 <prvProcessReceivedCommands+0x8>
	}
}
 8004ac4:	bf00      	nop
 8004ac6:	3730      	adds	r7, #48	; 0x30
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000c18 	.word	0x20000c18

08004ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ad6:	e047      	b.n	8004b68 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ad8:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae2:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe f967 	bl	8002dc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02d      	beq.n	8004b68 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d90e      	bls.n	8004b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b2a:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7fe f90c 	bl	8002d52 <vListInsert>
 8004b3a:	e015      	b.n	8004b68 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2300      	movs	r3, #0
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	2100      	movs	r1, #0
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff fd68 	bl	800461c <xTimerGenericCommand>
 8004b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <prvSwitchTimerLists+0x98>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	e7fe      	b.n	8004b66 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1b2      	bne.n	8004ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <prvSwitchTimerLists+0xc4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b80:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <prvSwitchTimerLists+0xc4>)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	6013      	str	r3, [r2, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000c10 	.word	0x20000c10
 8004b94:	20000c14 	.word	0x20000c14

08004b98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b9e:	f000 f965 	bl	8004e6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d120      	bne.n	8004bec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004baa:	4814      	ldr	r0, [pc, #80]	; (8004bfc <prvCheckForValidListAndQueue+0x64>)
 8004bac:	f7fe f880 	bl	8002cb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bb0:	4813      	ldr	r0, [pc, #76]	; (8004c00 <prvCheckForValidListAndQueue+0x68>)
 8004bb2:	f7fe f87d 	bl	8002cb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <prvCheckForValidListAndQueue+0x6c>)
 8004bb8:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <prvCheckForValidListAndQueue+0x64>)
 8004bba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <prvCheckForValidListAndQueue+0x70>)
 8004bbe:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <prvCheckForValidListAndQueue+0x68>)
 8004bc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <prvCheckForValidListAndQueue+0x74>)
 8004bc8:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <prvCheckForValidListAndQueue+0x78>)
 8004bca:	2110      	movs	r1, #16
 8004bcc:	200a      	movs	r0, #10
 8004bce:	f7fe f98b 	bl	8002ee8 <xQueueGenericCreateStatic>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004bd6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	490b      	ldr	r1, [pc, #44]	; (8004c14 <prvCheckForValidListAndQueue+0x7c>)
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fd8e 	bl	8003708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bec:	f000 f96c 	bl	8004ec8 <vPortExitCritical>
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000c18 	.word	0x20000c18
 8004bfc:	20000be8 	.word	0x20000be8
 8004c00:	20000bfc 	.word	0x20000bfc
 8004c04:	20000c10 	.word	0x20000c10
 8004c08:	20000c14 	.word	0x20000c14
 8004c0c:	20000cc4 	.word	0x20000cc4
 8004c10:	20000c24 	.word	0x20000c24
 8004c14:	080055e4 	.word	0x080055e4

08004c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b04      	subs	r3, #4
 8004c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b04      	subs	r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0201 	bic.w	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3b04      	subs	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <pxPortInitialiseStack+0x64>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3b14      	subs	r3, #20
 8004c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b04      	subs	r3, #4
 8004c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f06f 0202 	mvn.w	r2, #2
 8004c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b20      	subs	r3, #32
 8004c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	08004c81 	.word	0x08004c81

08004c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <prvTaskExitError+0x50>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d009      	beq.n	8004ca8 <prvTaskExitError+0x28>
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	e7fe      	b.n	8004ca6 <prvTaskExitError+0x26>
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cba:	bf00      	nop
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0fc      	beq.n	8004cbc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000000c 	.word	0x2000000c
	...

08004ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <pxCurrentTCBConst2>)
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	6808      	ldr	r0, [r1, #0]
 8004ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	f380 8809 	msr	PSP, r0
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f380 8811 	msr	BASEPRI, r0
 8004cfa:	4770      	bx	lr
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst2>:
 8004d00:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d08:	4808      	ldr	r0, [pc, #32]	; (8004d2c <prvPortStartFirstTask+0x24>)
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	6800      	ldr	r0, [r0, #0]
 8004d0e:	f380 8808 	msr	MSP, r0
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f380 8814 	msr	CONTROL, r0
 8004d1a:	b662      	cpsie	i
 8004d1c:	b661      	cpsie	f
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	df00      	svc	0
 8004d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d2a:	bf00      	nop
 8004d2c:	e000ed08 	.word	0xe000ed08

08004d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d36:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <xPortStartScheduler+0x118>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a44      	ldr	r2, [pc, #272]	; (8004e4c <xPortStartScheduler+0x11c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d109      	bne.n	8004d54 <xPortStartScheduler+0x24>
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	e7fe      	b.n	8004d52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d54:	4b3c      	ldr	r3, [pc, #240]	; (8004e48 <xPortStartScheduler+0x118>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a3d      	ldr	r2, [pc, #244]	; (8004e50 <xPortStartScheduler+0x120>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d109      	bne.n	8004d72 <xPortStartScheduler+0x42>
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e7fe      	b.n	8004d70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d72:	4b38      	ldr	r3, [pc, #224]	; (8004e54 <xPortStartScheduler+0x124>)
 8004d74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	22ff      	movs	r2, #255	; 0xff
 8004d82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	4b30      	ldr	r3, [pc, #192]	; (8004e58 <xPortStartScheduler+0x128>)
 8004d98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d9a:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004d9c:	2207      	movs	r2, #7
 8004d9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004da0:	e009      	b.n	8004db6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004da2:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004daa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	2b80      	cmp	r3, #128	; 0x80
 8004dc0:	d0ef      	beq.n	8004da2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f1c3 0307 	rsb	r3, r3, #7
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d009      	beq.n	8004de2 <xPortStartScheduler+0xb2>
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	e7fe      	b.n	8004de0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004de2:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004dea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004df6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <xPortStartScheduler+0x130>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <xPortStartScheduler+0x130>)
 8004e06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <xPortStartScheduler+0x130>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <xPortStartScheduler+0x130>)
 8004e12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e18:	f000 f8d6 	bl	8004fc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <xPortStartScheduler+0x134>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e22:	f000 f8f5 	bl	8005010 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e32:	f7ff ff69 	bl	8004d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e36:	f7ff f86b 	bl	8003f10 <vTaskSwitchContext>
	prvTaskExitError();
 8004e3a:	f7ff ff21 	bl	8004c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed00 	.word	0xe000ed00
 8004e4c:	410fc271 	.word	0x410fc271
 8004e50:	410fc270 	.word	0x410fc270
 8004e54:	e000e400 	.word	0xe000e400
 8004e58:	20000d14 	.word	0x20000d14
 8004e5c:	20000d18 	.word	0x20000d18
 8004e60:	e000ed20 	.word	0xe000ed20
 8004e64:	2000000c 	.word	0x2000000c
 8004e68:	e000ef34 	.word	0xe000ef34

08004e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <vPortEnterCritical+0x54>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <vPortEnterCritical+0x54>)
 8004e8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <vPortEnterCritical+0x54>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10e      	bne.n	8004eb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e96:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <vPortEnterCritical+0x58>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <vPortEnterCritical+0x48>
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	e7fe      	b.n	8004eb2 <vPortEnterCritical+0x46>
	}
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	2000000c 	.word	0x2000000c
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ece:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <vPortExitCritical+0x4c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <vPortExitCritical+0x22>
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	e7fe      	b.n	8004ee8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <vPortExitCritical+0x4c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <vPortExitCritical+0x4c>)
 8004ef2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <vPortExitCritical+0x4c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <vPortExitCritical+0x3e>
 8004efc:	2300      	movs	r3, #0
 8004efe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	2000000c 	.word	0x2000000c
	...

08004f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f20:	f3ef 8009 	mrs	r0, PSP
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <pxCurrentTCBConst>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f01e 0f10 	tst.w	lr, #16
 8004f30:	bf08      	it	eq
 8004f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f44:	f380 8811 	msr	BASEPRI, r0
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f7fe ffde 	bl	8003f10 <vTaskSwitchContext>
 8004f54:	f04f 0000 	mov.w	r0, #0
 8004f58:	f380 8811 	msr	BASEPRI, r0
 8004f5c:	bc09      	pop	{r0, r3}
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	6808      	ldr	r0, [r1, #0]
 8004f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f66:	f01e 0f10 	tst.w	lr, #16
 8004f6a:	bf08      	it	eq
 8004f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f70:	f380 8809 	msr	PSP, r0
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst>:
 8004f80:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fa0:	f7fe fefe 	bl	8003da0 <xTaskIncrementTick>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <xPortSysTickHandler+0x3c>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <vPortSetupTimerInterrupt+0x34>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <vPortSetupTimerInterrupt+0x38>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <vPortSetupTimerInterrupt+0x3c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <vPortSetupTimerInterrupt+0x40>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	4a09      	ldr	r2, [pc, #36]	; (800500c <vPortSetupTimerInterrupt+0x44>)
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <vPortSetupTimerInterrupt+0x34>)
 8004fec:	2207      	movs	r2, #7
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e010 	.word	0xe000e010
 8005000:	e000e018 	.word	0xe000e018
 8005004:	20000000 	.word	0x20000000
 8005008:	10624dd3 	.word	0x10624dd3
 800500c:	e000e014 	.word	0xe000e014

08005010 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005010:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005020 <vPortEnableVFP+0x10>
 8005014:	6801      	ldr	r1, [r0, #0]
 8005016:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800501a:	6001      	str	r1, [r0, #0]
 800501c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800501e:	bf00      	nop
 8005020:	e000ed88 	.word	0xe000ed88

08005024 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800502a:	f3ef 8305 	mrs	r3, IPSR
 800502e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b0f      	cmp	r3, #15
 8005034:	d913      	bls.n	800505e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005036:	4a16      	ldr	r2, [pc, #88]	; (8005090 <vPortValidateInterruptPriority+0x6c>)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005040:	4b14      	ldr	r3, [pc, #80]	; (8005094 <vPortValidateInterruptPriority+0x70>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	7afa      	ldrb	r2, [r7, #11]
 8005046:	429a      	cmp	r2, r3
 8005048:	d209      	bcs.n	800505e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	e7fe      	b.n	800505c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800505e:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <vPortValidateInterruptPriority+0x74>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <vPortValidateInterruptPriority+0x78>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d909      	bls.n	8005082 <vPortValidateInterruptPriority+0x5e>
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	e7fe      	b.n	8005080 <vPortValidateInterruptPriority+0x5c>
	}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e3f0 	.word	0xe000e3f0
 8005094:	20000d14 	.word	0x20000d14
 8005098:	e000ed0c 	.word	0xe000ed0c
 800509c:	20000d18 	.word	0x20000d18

080050a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050ac:	f7fe fdbe 	bl	8003c2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050b0:	4b57      	ldr	r3, [pc, #348]	; (8005210 <pvPortMalloc+0x170>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050b8:	f000 f90c 	bl	80052d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050bc:	4b55      	ldr	r3, [pc, #340]	; (8005214 <pvPortMalloc+0x174>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f040 808c 	bne.w	80051e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01c      	beq.n	800510a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050d0:	2208      	movs	r2, #8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d013      	beq.n	800510a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f023 0307 	bic.w	r3, r3, #7
 80050e8:	3308      	adds	r3, #8
 80050ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <pvPortMalloc+0x6a>
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e7fe      	b.n	8005108 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d068      	beq.n	80051e2 <pvPortMalloc+0x142>
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <pvPortMalloc+0x178>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d863      	bhi.n	80051e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800511a:	4b40      	ldr	r3, [pc, #256]	; (800521c <pvPortMalloc+0x17c>)
 800511c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800511e:	4b3f      	ldr	r3, [pc, #252]	; (800521c <pvPortMalloc+0x17c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005124:	e004      	b.n	8005130 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d903      	bls.n	8005142 <pvPortMalloc+0xa2>
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f1      	bne.n	8005126 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005142:	4b33      	ldr	r3, [pc, #204]	; (8005210 <pvPortMalloc+0x170>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005148:	429a      	cmp	r2, r3
 800514a:	d04a      	beq.n	80051e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2208      	movs	r2, #8
 8005152:	4413      	add	r3, r2
 8005154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	1ad2      	subs	r2, r2, r3
 8005166:	2308      	movs	r3, #8
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	429a      	cmp	r2, r3
 800516c:	d91e      	bls.n	80051ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <pvPortMalloc+0xf4>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e7fe      	b.n	8005192 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051a6:	69b8      	ldr	r0, [r7, #24]
 80051a8:	f000 f8f6 	bl	8005398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051ac:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <pvPortMalloc+0x178>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <pvPortMalloc+0x178>)
 80051b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051ba:	4b17      	ldr	r3, [pc, #92]	; (8005218 <pvPortMalloc+0x178>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b18      	ldr	r3, [pc, #96]	; (8005220 <pvPortMalloc+0x180>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d203      	bcs.n	80051ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <pvPortMalloc+0x178>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a15      	ldr	r2, [pc, #84]	; (8005220 <pvPortMalloc+0x180>)
 80051cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <pvPortMalloc+0x174>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051e2:	f7fe fd31 	bl	8003c48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <pvPortMalloc+0x164>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e7fe      	b.n	8005202 <pvPortMalloc+0x162>
	return pvReturn;
 8005204:	69fb      	ldr	r3, [r7, #28]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3728      	adds	r7, #40	; 0x28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20004924 	.word	0x20004924
 8005214:	20004930 	.word	0x20004930
 8005218:	20004928 	.word	0x20004928
 800521c:	2000491c 	.word	0x2000491c
 8005220:	2000492c 	.word	0x2000492c

08005224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d046      	beq.n	80052c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005236:	2308      	movs	r3, #8
 8005238:	425b      	negs	r3, r3
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4413      	add	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4b20      	ldr	r3, [pc, #128]	; (80052cc <vPortFree+0xa8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <vPortFree+0x42>
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e7fe      	b.n	8005264 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <vPortFree+0x5e>
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	e7fe      	b.n	8005280 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4b11      	ldr	r3, [pc, #68]	; (80052cc <vPortFree+0xa8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d019      	beq.n	80052c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d115      	bne.n	80052c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <vPortFree+0xa8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052a8:	f7fe fcc0 	bl	8003c2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <vPortFree+0xac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4413      	add	r3, r2
 80052b6:	4a06      	ldr	r2, [pc, #24]	; (80052d0 <vPortFree+0xac>)
 80052b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ba:	6938      	ldr	r0, [r7, #16]
 80052bc:	f000 f86c 	bl	8005398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052c0:	f7fe fcc2 	bl	8003c48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052c4:	bf00      	nop
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20004930 	.word	0x20004930
 80052d0:	20004928 	.word	0x20004928

080052d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <prvHeapInit+0xac>)
 80052e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3307      	adds	r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <prvHeapInit+0xac>)
 8005304:	4413      	add	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <prvHeapInit+0xb0>)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <prvHeapInit+0xb0>)
 8005314:	2200      	movs	r2, #0
 8005316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4413      	add	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005320:	2208      	movs	r2, #8
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0307 	bic.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <prvHeapInit+0xb4>)
 8005334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <prvHeapInit+0xb4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <prvHeapInit+0xb4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <prvHeapInit+0xb4>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4a0a      	ldr	r2, [pc, #40]	; (800538c <prvHeapInit+0xb8>)
 8005362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a09      	ldr	r2, [pc, #36]	; (8005390 <prvHeapInit+0xbc>)
 800536a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800536c:	4b09      	ldr	r3, [pc, #36]	; (8005394 <prvHeapInit+0xc0>)
 800536e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005372:	601a      	str	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000d1c 	.word	0x20000d1c
 8005384:	2000491c 	.word	0x2000491c
 8005388:	20004924 	.word	0x20004924
 800538c:	2000492c 	.word	0x2000492c
 8005390:	20004928 	.word	0x20004928
 8005394:	20004930 	.word	0x20004930

08005398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053a0:	4b28      	ldr	r3, [pc, #160]	; (8005444 <prvInsertBlockIntoFreeList+0xac>)
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e002      	b.n	80053ac <prvInsertBlockIntoFreeList+0x14>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d8f7      	bhi.n	80053a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	4413      	add	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d108      	bne.n	80053da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	441a      	add	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	441a      	add	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d118      	bne.n	8005420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <prvInsertBlockIntoFreeList+0xb0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d00d      	beq.n	8005416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	441a      	add	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e008      	b.n	8005428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <prvInsertBlockIntoFreeList+0xb0>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e003      	b.n	8005428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d002      	beq.n	8005436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000491c 	.word	0x2000491c
 8005448:	20004924 	.word	0x20004924

0800544c <__libc_init_array>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4e0d      	ldr	r6, [pc, #52]	; (8005484 <__libc_init_array+0x38>)
 8005450:	4c0d      	ldr	r4, [pc, #52]	; (8005488 <__libc_init_array+0x3c>)
 8005452:	1ba4      	subs	r4, r4, r6
 8005454:	10a4      	asrs	r4, r4, #2
 8005456:	2500      	movs	r5, #0
 8005458:	42a5      	cmp	r5, r4
 800545a:	d109      	bne.n	8005470 <__libc_init_array+0x24>
 800545c:	4e0b      	ldr	r6, [pc, #44]	; (800548c <__libc_init_array+0x40>)
 800545e:	4c0c      	ldr	r4, [pc, #48]	; (8005490 <__libc_init_array+0x44>)
 8005460:	f000 f82c 	bl	80054bc <_init>
 8005464:	1ba4      	subs	r4, r4, r6
 8005466:	10a4      	asrs	r4, r4, #2
 8005468:	2500      	movs	r5, #0
 800546a:	42a5      	cmp	r5, r4
 800546c:	d105      	bne.n	800547a <__libc_init_array+0x2e>
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005474:	4798      	blx	r3
 8005476:	3501      	adds	r5, #1
 8005478:	e7ee      	b.n	8005458 <__libc_init_array+0xc>
 800547a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800547e:	4798      	blx	r3
 8005480:	3501      	adds	r5, #1
 8005482:	e7f2      	b.n	800546a <__libc_init_array+0x1e>
 8005484:	08005630 	.word	0x08005630
 8005488:	08005630 	.word	0x08005630
 800548c:	08005630 	.word	0x08005630
 8005490:	08005634 	.word	0x08005634

08005494 <memcpy>:
 8005494:	b510      	push	{r4, lr}
 8005496:	1e43      	subs	r3, r0, #1
 8005498:	440a      	add	r2, r1
 800549a:	4291      	cmp	r1, r2
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	bd10      	pop	{r4, pc}
 80054a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a8:	e7f7      	b.n	800549a <memcpy+0x6>

080054aa <memset>:
 80054aa:	4402      	add	r2, r0
 80054ac:	4603      	mov	r3, r0
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d100      	bne.n	80054b4 <memset+0xa>
 80054b2:	4770      	bx	lr
 80054b4:	f803 1b01 	strb.w	r1, [r3], #1
 80054b8:	e7f9      	b.n	80054ae <memset+0x4>
	...

080054bc <_init>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr

080054c8 <_fini>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr
